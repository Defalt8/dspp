#pragma once
#ifndef DS_UNORDERED_LIST
#define DS_UNORDERED_LIST

#include "common"
#include "traits/allocator"
#include "traits/iterable"
#include "unique"
#include "fixed"

namespace ds {

template <size_t table_size_, typename E> struct UnorderedListNode;
template <size_t table_size_, typename E, class A = default_allocator> class UnorderedListIterator;
template <size_t table_size_, typename E, class A = default_allocator> class ConstUnorderedListIterator;
template <size_t table_size_, typename E, class A = default_allocator> class UnorderedList;

namespace traits {

	template <size_t table_size_, typename E, class A>
	struct iterable<UnorderedList<table_size_,E,A>> : public iterable_traits<
			  E
			, size_t
			, void
			, void const
			, UnorderedListIterator<table_size_,E,A>
			, ConstUnorderedListIterator<table_size_,E,A>
			, UnorderedListIterator<table_size_,E,A>
			, ConstUnorderedListIterator<table_size_,E,A>
		> 
	{};

	template <size_t table_size_, typename E, class A>
	struct iterable<UnorderedList<table_size_,E,A> const> : public iterable_traits<
			  E
			, size_t
			, void
			, void const
			, void
			, ConstUnorderedListIterator<table_size_,E,A>
			, void
			, ConstUnorderedListIterator<table_size_,E,A>
		> 
	{};

	template <size_t table_size_, typename E, class A>
	struct allocator<UnorderedList<table_size_,E,A>> : public allocator_traits<A> {};

	template <size_t table_size_, typename E, class A>
	struct allocator<UnorderedList<table_size_,E,A> const> : public allocator_traits<A> {};

} // namespace trait


template <size_t table_size_, typename E>
struct UnorderedListNode
{
	E              object  {};
	UnorderedListNode * prev = nullptr;
	UnorderedListNode * next = nullptr;

	template <typename... Args>
	UnorderedListNode(Args &&... args)
		: object (ds::forward<Args>(args)...)
	{}

};

template <size_t table_size_, typename E, class A>
class UnorderedListIterator
{
	friend class UnorderedList<table_size_,E,A>;
	friend class ConstUnorderedListIterator<table_size_,E,A>;
	using node_t           = UnorderedListNode<table_size_,E>;
	using list_t           = UnorderedList<table_size_,E,A>;
	using const_iterator_t = ConstUnorderedListIterator<table_size_,E,A>;

	list_t * m_list = nullptr;
	node_t * m_node = nullptr;
	int      m_end  = 0; // at end if > 0 and null node, else at reverse end if < 0 and null node  
	
	UnorderedListIterator(list_t * list_, node_t * node_, int end_ = 0)
		: m_list { list_ }
		, m_node { node_ }
		, m_end  { end_  }
	{}

 public:
	struct null_iterator : public exception
	{
		char const * what() const noexcept override { return "null iterator"; }
	};

	UnorderedListIterator() = default;
	UnorderedListIterator(UnorderedListIterator const &) = default;
	UnorderedListIterator(UnorderedListIterator &&) = default;
	UnorderedListIterator & operator=(UnorderedListIterator const &) = default;
	UnorderedListIterator & operator=(UnorderedListIterator &&) = default;

	inline E       & operator*()        noexcept { return m_node->object ; }
	inline E const & operator*()  const noexcept { return m_node->object ; }

	inline E       * operator->()       noexcept { return &m_node->object ; }
	inline E const * operator->() const noexcept { return &m_node->object ; }

	inline bool operator!() const noexcept { return m_node == nullptr; }

	explicit inline operator bool()          noexcept { return m_node != nullptr; }
	explicit inline operator bool()    const noexcept { return m_node != nullptr; }

	inline bool 
	operator==(UnorderedListIterator const & rhs) const noexcept
	{
		return m_node == rhs.m_node && (m_end * rhs.m_end >= 0);
	}

	inline bool 
	operator!=(UnorderedListIterator const & rhs) const noexcept
	{
		return m_node != rhs.m_node || (m_end * rhs.m_end < 0);
	}
	
	inline bool 
	operator==(const_iterator_t const & rhs) const noexcept
	{
		return m_node == rhs.m_node && (m_end * rhs.m_end >= 0);
	}

	inline bool 
	operator!=(const_iterator_t const & rhs) const noexcept
	{
		return m_node != rhs.m_node || (m_end * rhs.m_end < 0);
	}

	UnorderedListIterator &
	operator++() noexcept
	{
		if(m_node)
		{
			m_node = m_node->next;
			if(!m_node)
				m_end = 1; // at the end
		}
		else if(m_list != nullptr && m_end < 0)
		{
			m_node = m_list->m_data->first;
			m_end  = 0;
		}
		return *this;
	}
	
	UnorderedListIterator
	operator++(int) noexcept
	{
		auto it_ = *this;
		this->operator++();
		return ds::move(it_);
	}
	
	UnorderedListIterator &
	operator--() noexcept
	{
		if(m_node)
		{
			m_node = m_node->prev;
			if(!m_node)
				m_end = -1; // at the reverse-end
		}
		else if(m_list != nullptr && m_end > 0)
		{
			m_node = m_list->m_data->last;
			m_end  = 0;
		}
		return *this;
	}

	UnorderedListIterator
	operator--(int) noexcept
	{
		auto it_ = *this;
		this->operator--();
		return ds::move(it_);
	}
	
	inline E       * ptr()       noexcept { return m_node == nullptr ? nullptr : &m_node->object ; }
	inline E const * ptr() const noexcept { return m_node == nullptr ? nullptr : &m_node->object ; }

	inline E & 
	ref() noexcept(false) 
	{ 
		ds_throw_if(!m_node, null_iterator());
		return m_node->object ; 
	}

	inline E const & 
	ref() const noexcept(false) 
	{ 
		ds_throw_if(!m_node, null_iterator());
		return m_node->object ; 
	}

	inline void
	swap(UnorderedListIterator & rhs) noexcept
	{
		ds::swap(m_list, rhs.m_list);
		ds::swap(m_node, rhs.m_node);
		ds::swap(m_end,  rhs.m_end);
	}

};


template <size_t table_size_, typename E, class A>
class ConstUnorderedListIterator
{
	friend class UnorderedList<table_size_,E,A>;
	friend class UnorderedListIterator<table_size_,E,A>;
	using node_t     = UnorderedListNode<table_size_,E>;
	using list_t     = UnorderedList<table_size_,E,A>;
	using iterator_t = UnorderedListIterator<table_size_,E,A>;

	list_t const * m_list = nullptr;
	node_t       * m_node = nullptr;
	int            m_end  = 0; // at end if > 0 and null node, else at reverse end if < 0 and null node  
	
	ConstUnorderedListIterator(list_t const * list_, node_t * node_, int end_ = 0)
		: m_list { list_ }
		, m_node { node_ }
		, m_end  { end_  }
	{}

 public:
	struct null_iterator : public exception
	{
		char const * what() const noexcept override { return "null iterator"; }
	};

	ConstUnorderedListIterator() = default;
	ConstUnorderedListIterator(ConstUnorderedListIterator const &) = default;
	ConstUnorderedListIterator(ConstUnorderedListIterator &&) = default;
	ConstUnorderedListIterator & operator=(ConstUnorderedListIterator const &) = default;
	ConstUnorderedListIterator & operator=(ConstUnorderedListIterator &&) = default;

	inline E const & operator*()  const noexcept { return m_node->object ; }

	inline E const * operator->() const noexcept { return &m_node->object ; }

	inline bool operator!() const noexcept { return m_node == nullptr; }

	explicit inline operator bool()          noexcept { return m_node != nullptr; }
	explicit inline operator bool()    const noexcept { return m_node != nullptr; }

	inline bool 
	operator==(ConstUnorderedListIterator const & rhs) const noexcept
	{
		return m_node == rhs.m_node && (m_end * rhs.m_end >= 0);
	}

	inline bool 
	operator!=(ConstUnorderedListIterator const & rhs) const noexcept
	{
		return m_node != rhs.m_node || (m_end * rhs.m_end < 0);
	}
	
	inline bool 
	operator==(iterator_t const & rhs) const noexcept
	{
		return m_node == rhs.m_node && (m_end * rhs.m_end >= 0);
	}

	inline bool 
	operator!=(iterator_t const & rhs) const noexcept
	{
		return m_node != rhs.m_node || (m_end * rhs.m_end < 0);
	}

	ConstUnorderedListIterator &
	operator++() noexcept
	{
		if(m_node)
		{
			m_node = m_node->next;
			if(!m_node)
				m_end = 1; // at the end
		}
		else if(m_list != nullptr && m_end < 0)
		{
			m_node = m_list->m_data->first;
			m_end  = 0;
		}
		return *this;
	}
	
	ConstUnorderedListIterator
	operator++(int) noexcept
	{
		auto it_ = *this;
		this->operator++();
		return ds::move(it_);
	}
	
	ConstUnorderedListIterator &
	operator--() noexcept
	{
		if(m_node)
		{
			m_node = m_node->prev;
			if(!m_node)
				m_end = -1; // at the reverse-end
		}
		else if(m_list != nullptr && m_end > 0)
		{
			m_node = m_list->m_data->last;
			m_end  = 0;
		}
		return *this;
	}

	ConstUnorderedListIterator
	operator--(int) noexcept
	{
		auto it_ = *this;
		this->operator--();
		return ds::move(it_);
	}
	
	inline E const * ptr() const noexcept { return m_node == nullptr ? nullptr : &m_node->object ; }

	inline E const & 
	ref() const noexcept(false) 
	{ 
		ds_throw_if(!m_node, null_iterator());
		return m_node->object ; 
	}

	inline void
	swap(ConstUnorderedListIterator & rhs) noexcept
	{
		ds::swap(m_list, rhs.m_list);
		ds::swap(m_node, rhs.m_node);
		ds::swap(m_end,  rhs.m_end);
	}

};


template <size_t table_size_, typename E, class A> 
class UnorderedList
{
	friend class UnorderedListIterator<table_size_,E,A>;
	friend class ConstUnorderedListIterator<table_size_,E,A>;

 public:
	using node_t           = UnorderedListNode<table_size_,E>;
	using table_t          = Fixed<table_size_,node_t *>;
	using iterator_t       = UnorderedListIterator<table_size_,E,A>;
	using const_iterator_t = ConstUnorderedListIterator<table_size_,E,A>;

	struct Storage
	{
		table_t   table = {};
		node_t  * first = nullptr;
		node_t  * last  = nullptr;
	};
	
	using storage_t = Unique<Storage,A>; 

	// static constexpr bool _hash_requirement = is_hashable<E>::value;
	// static_assert(_hash_requirement, "ds::Hasher<E> specialization required");

 private:
	storage_t m_data = {};
	size_t    m_size   = 0;

	static inline void
	_deallocate(void * block_) noexcept
	{
		return A::deallocate(block_);
	}

	DS_nodiscard static inline void *
	_allocate(size_t size_, align_t align_)
	{
		return A::allocate(size_, align_);
	}
	
	template <typename T = E>
	inline size_t 
	_hash_index(T && object) const noexcept
	{
		auto   hash_  = Hasher<E>::hash(object);
		return hash_ % m_data->table.size();
	}

	template <typename T = E>
	inline node_t * &
	_hash_entry(T && object) noexcept
	{
		return m_data->table[_hash_index(object)];
	}

	template <typename T = E>
	inline node_t * const &
	_hash_entry(T && object) const noexcept
	{
		return m_data->table[_hash_index(object)];
	}

	template <typename T = E>
	inline node_t * &
	_hash_entry_and_index(T && object, size_t & index) noexcept
	{
		index = _hash_index(object);
		return m_data->table[index];
	}

	template <typename T = E>
	inline node_t * const &
	_hash_entry_and_index(T && object, size_t & index) const noexcept
	{
		index = _hash_index(object);
		return m_data->table[index];
	}

	// insert node at the end of the list
	iterator_t
	_insert_node_last(node_t * const node) noexcept
	{
		if(!m_data->first)
			m_data->first = m_data->last = node;
		else
		{
			node->prev   = m_data->last;
			node->next   = nullptr;
			m_data->last->next = node;
			m_data->last       = node;
		}
		++m_size;
		return { this, node };
	}

	// insert node at the begining of the list
	iterator_t
	_insert_node_first(node_t * const node) noexcept
	{
		if(!m_data->first)
			m_data->first = m_data->last = node;
		else
		{
			node->prev    = nullptr;
			node->next    = m_data->first;
			m_data->first->prev = node;
			m_data->first       = node;
		}
		++m_size;
		return { this, node };
	}

	iterator_t
	_insert_node_before(node_t * const before_node, node_t * const node) noexcept
	{
		if(!m_data->first)
			m_data->first = m_data->last = node;
		else if(!before_node || before_node == m_data->first)
		{
			node->prev    = nullptr;
			node->next    = m_data->first;
			m_data->first->prev = node;
			m_data->first       = node;
		}
		else
		{
			node->prev = before_node->prev;
			node->next = before_node;
			before_node->prev = node;
			if(node->prev)
				node->prev->next = node;
		}
		++m_size;
		return { this, node };
	}

	iterator_t
	_insert_node_after(node_t * const after_node, node_t * const node) noexcept
	{
		if(!m_data->first)
			m_data->first = m_data->last = node;
		else if(!after_node || after_node == m_data->last)
		{
			node->prev    = m_data->last;
			node->next    = nullptr;
			m_data->last->next  = node;
			m_data->last        = node;
		}
		else
		{
			node->prev = after_node;
			node->next = after_node->next;
			after_node->next = node;
			if(node->next)
				node->next->prev = node;
		}
		++m_size;
		return { this, node };
	}

	template <typename T = E>
	iterator_t
	_insert_object(T && object_) noexcept
	{
		auto & entry = _hash_entry(object_);
		node_t * const node = construct_at_safe<node_t>(_allocate(sizeof(node_t), alignof(node_t)), ds::forward<T>(object_));
		if(!node)
			return {};
		auto const & object = node->object;
		auto       * inode  = entry;
		entry = node;
		if(inode != nullptr)
			return _insert_node_after(inode, node);
		return _insert_node_last(node);
	}

	template <typename T = E>
	iterator_t
	_insert_object_unique(T && object, bool replace) noexcept
	{
		size_t hash_index = 0;
		auto & entry = _hash_entry_and_index(object, hash_index);
		if(entry != nullptr)
		{
			auto * inode = entry;
			for(; inode != nullptr && _hash_index(inode->object) == hash_index; inode = inode->prev)
			{
				if(inode->object == object)
				{
					if(replace)
					{
						destruct(inode->object);
						construct_at<E>(&inode->object, ds::forward<T>(object));
					}
					return { this, inode };
				}
			}
			// no duplicates found
			node_t * const node = construct_at_safe<node_t>(_allocate(sizeof(node_t), alignof(node_t)), ds::forward<T>(object));
			if(!node)
				return {};
			inode = entry;
			entry = node;
			return _insert_node_after(inode, node);
		}
		else
		{
			node_t * const node = construct_at_safe<node_t>(_allocate(sizeof(node_t), alignof(node_t)), ds::forward<T>(object));
			if(!node)
				return {};
			entry = node;
			return _insert_node_last(node);
		}
	}

 public:
	UnorderedList() = default;

	~UnorderedList() noexcept
	{
		this->destroy();
	}

	UnorderedList(noinit_t)
		: m_data { noinit }
	{}

	UnorderedList(UnorderedList && rhs) noexcept
		: m_data { ds::move(rhs.m_data) }
		, m_size { rhs.m_size }
	{
		rhs.m_size = 0;
	}

	UnorderedList(UnorderedList const & rhs)
	{
		if(m_data && rhs.m_data)
			for(auto node = rhs.m_data->first; node != nullptr && this->insert(node->object); node = node->next);
	}

	template <typename T = E, size_t size_, enable_if_t<is_constructible<E,T &&>::value,int> = 0>
	UnorderedList(T (&& array_)[size_], duplicate_rule param = {})
	{
		if(m_data)
		{
			switch(param)
			{
				default:
				case duplicate_rule::allow:
					for(size_t i = 0; i < size_ && this->_insert_object(ds::move(array_[i])); ++i);
					break;
				case duplicate_rule::unique:
					for(size_t i = 0; i < size_ && this->_insert_object_unique(ds::move(array_[i]), false); ++i);
					break;
				case duplicate_rule::replace:
					for(size_t i = 0; i < size_ && this->_insert_object_unique(ds::move(array_[i]), true); ++i);
					break;
			}
		}
	}

	template <typename D, typename T = E, size_t size_, enable_if_t<is_constructible<E,make<D>,T &&>::value,int> = 0>
	UnorderedList(make<D> make_, T (&& array_)[size_], duplicate_rule param = {})
	{
		if(m_data)
		{
			switch(param)
			{
				default:
				case duplicate_rule::allow:
					for(size_t i = 0; i < size_ && this->_insert_object({ make_, ds::move(array_[i]) }); ++i);
					break;
				case duplicate_rule::unique:
					for(size_t i = 0; i < size_ && this->_insert_object_unique({ make_, ds::move(array_[i]) }, false); ++i);
					break;
				case duplicate_rule::replace:
					for(size_t i = 0; i < size_ && this->_insert_object_unique({ make_, ds::move(array_[i]) }, true); ++i);
					break;
			}
		}
	}

	template <typename Begin, typename End
		, typename T = decltype(*decl<Begin &>())
		, typename   = decltype(++decl<Begin &>())
		, enable_if_t<is_constructible<E,T>::value,int> = 0>
	UnorderedList(Begin && begin_, End && end_, duplicate_rule param = {})
	{
		if(m_data)
		{
			switch(param)
			{
				default:
				case duplicate_rule::allow:
					for(auto it = begin_; it != end_ && this->_insert_object(*it); ++it);
					break;
				case duplicate_rule::unique:
					for(auto it = begin_; it != end_ && this->_insert_object_unique(*it, false); ++it);
					break;
				case duplicate_rule::replace:
					for(auto it = begin_; it != end_ && this->_insert_object_unique(*it, true); ++it);
					break;
			}
		}
	}

	UnorderedList & 
	operator=(UnorderedList && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}

	UnorderedList & 
	operator=(UnorderedList const & rhs)
	{
		if(&rhs != this)
		{
			this->destroy();
			m_data = {};
			if(m_data && rhs.m_data)
				for(auto node = rhs.m_data->first; node != nullptr && this->insert(node->object); node = node->next);
		}
		return *this;
	}

	inline bool operator!() const noexcept { return !m_data; }

	explicit inline operator bool()       noexcept { return bool(m_data); }
	explicit inline operator bool() const noexcept { return bool(m_data); }

	table_t const & table() const noexcept { return m_data->table; }

	size_t size() const noexcept { return m_size; }

	iterator_t       begin()        noexcept { return { this, m_data ? m_data->first : nullptr };  }
	const_iterator_t begin()  const noexcept { return { this, m_data ? m_data->first : nullptr };  }
	iterator_t       end()          noexcept { return { this, nullptr, 1 };    }
	const_iterator_t end()    const noexcept { return { this, nullptr, 1 };    }

	iterator_t       rbegin()       noexcept { return { this, m_data ? m_data->last : nullptr }; }
	const_iterator_t rbegin() const noexcept { return { this, m_data ? m_data->last : nullptr }; }
	iterator_t       rend()         noexcept { return { this, nullptr, -1 };   }
	const_iterator_t rend()   const noexcept { return { this, nullptr, -1 };   }
	
	void
	destroy() noexcept
	{
		if(m_data)
		{
			for(auto node = m_data->last; node;)
			{
				auto current = node;
				node = node->prev;
				destruct(*current);
				_deallocate(current);
			}
			m_data.destroy();
			m_size = 0;
		}
	}

	template <typename... Args
			, enable_if_t<is_constructible<E,Args...>::value,int> = 0
		>
	iterator_t
	emplace(Args &&... args)
	{
		if(!m_data)
			return {};
		return _insert_object({ ds::forward<Args>(args)... });
	}

	template <typename... Args
			, enable_if_t<is_constructible<E,Args...>::value,int> = 0
		>
	iterator_t
	emplace_unique(Args &&... args)
	{
		if(!m_data)
			return {};
		return _insert_object_unique({ ds::forward<Args>(args)... }, false);
	}

	template <typename... Args
			, enable_if_t<is_constructible<E,Args...>::value,int> = 0
		>
	iterator_t
	emplace_replace(Args &&... args)
	{
		if(!m_data)
			return {};
		return _insert_object_unique({ ds::forward<Args>(args)... }, true);
	}

	template <typename T = E
			, enable_if_t<is_constructible<E,T>::value,int> = 0
		>
	iterator_t
	insert(T && object)
	{
		if(!m_data)
			return {};
		return _insert_object(ds::forward<T>(object));
	}

	template <typename T = E
			, enable_if_t<is_constructible<E,T>::value,int> = 0
		>
	iterator_t
	insert_unique(T && object)
	{
		if(!m_data)
			return {};
		return _insert_object_unique(ds::forward<T>(object), false);
	}

	template <typename T = E
			, enable_if_t<is_constructible<E,T>::value,int> = 0
		>
	iterator_t
	insert_replace(T && object)
	{
		if(!m_data)
			return {};
		return _insert_object_unique(ds::forward<T>(object), true);
	}

	bool
	remove_at(iterator_t const & position) noexcept
	{
		if(position.m_list != this || position.m_node == nullptr)
			return false;
		// remove from the table
		node_t * const node = position.m_node;
		{
			size_t hash_index;
			auto & entry = _hash_entry_and_index(node->object, hash_index);
			if(entry == node)
			{
				if(node->next && _hash_index(node->next->object) == hash_index)
					entry = node->next;
				else if(node->prev && _hash_index(node->prev->object) == hash_index)
					entry = node->prev;
				else
					entry = nullptr;
			}
		}
		// remove from the list
		if(node->prev)
			node->prev->next = node->next;
		if(node->next)
			node->next->prev = node->prev;
		if(m_data->first == node)
			m_data->first = node->next;
		if(m_data->last == node)
			m_data->last = node->prev;
		destruct(*node);
		_deallocate(node);
		--m_size;
		return true;
	}

	template <typename T = E>
	inline bool
	remove(T && object) noexcept
	{
		return remove_at(position_of(object));
	}

	template <typename T = E>
	iterator_t 
	position_of(T && object, size_t skip_ = 0) noexcept
	{
		if(m_data)
		{
			size_t hash_index;
			auto & entry = _hash_entry_and_index(object, hash_index);
			for(auto node = entry; node != nullptr; node = node->prev)
			{
				if(node->object == object && skip_-- == 0)
					return { this, node };
				else if(_hash_index(node->object) != hash_index)
					break;
			}
		}
		return { this, nullptr, 1 };
	}

	template <typename T = E>
	const_iterator_t 
	position_of(T && object, size_t skip_ = 0) const noexcept
	{
		if(m_data->first)
		{
			size_t hash_index;
			auto & entry = _hash_entry_and_index(object, hash_index);
			for(auto node = entry; node != nullptr; node = node->prev)
			{
				if(node->object == object && skip_-- == 0)
					return { this, node };
				else if(_hash_index(node->object) != hash_index)
					break;
			}
		}
		return { this, nullptr, 1 };
	}

	inline void 
	swap(UnorderedList & rhs) noexcept 
	{
		ds::swap(m_data, rhs.m_data);
		ds::swap(m_size, rhs.m_size);
	}

};


template <size_t table_size_, typename E, class A = default_allocator> 
using unordered_list_iterator = UnorderedListIterator<table_size_,E,A>;

template <size_t table_size_, typename E, class A = default_allocator> 
using const_unordered_list_iterator = UnorderedListIterator<table_size_,E,A>;

template <size_t table_size_, typename E, class A = default_allocator> 
using unordered_list = UnorderedList<table_size_,E,A>;

template <size_t table_size_, typename E, class A = default_nt_allocator> 
using nt_unordered_list_iterator = UnorderedListIterator<table_size_,E,A>;

template <size_t table_size_, typename E, class A = default_nt_allocator> 
using const_nt_unordered_list_iterator = UnorderedListIterator<table_size_,E,A>;

template <size_t table_size_, typename E, class A = default_nt_allocator> 
using nt_unordered_list = UnorderedList<table_size_,E,A>;


template <size_t table_size_, typename E, class A, size_t size_>
struct usage_s<UnorderedList<table_size_,E,A>,size_> 
{ 
	using node_t    = UnorderedListNode<table_size_,E>;
	using storage_t = typename UnorderedList<table_size_,E,A>::storage_t;
	static constexpr size_t _offset  = aligned_offset(alignof(storage_t) + usage<storage_t>::value, alignof(node_t));
	static constexpr size_t _single  = sizeof(node_t) + usage<E>::value;
	static constexpr size_t _offsetn = aligned_offset(alignof(node_t) + _single, alignof(node_t));
	static constexpr size_t value   = usage<storage_t>::value 
		+ _offset + ((_offsetn + _single) * size_); 
};

template <size_t table_size_, typename E, class A, size_t size_, size_t count_>
struct usage_sn<UnorderedList<table_size_,E,A>,size_,count_>
{
	static constexpr size_t _single = usage_s<UnorderedList<table_size_,E,A>,size_>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(UnorderedListNode<table_size_,E>));
	static constexpr size_t value   = (_single + _offset) * count_;
};


template <size_t table_size_, typename E, class A>
struct inserter<UnorderedList<table_size_,E,A>,E>
{
	UnorderedList<table_size_,E,A> & _unordered_list;

	inline bool
	init(size_t required_size)
	{
		return true;
	}

	template <typename T, enable_if_t<is_constructible<E,T>::value,int> = 0>
	inline bool
	insert(T && object)
	{
		return bool(_unordered_list.insert(ds::forward<T>(object)));
	}

};

} // namespace ds

#endif // DS_UNORDERED_LIST
