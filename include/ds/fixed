#pragma once
#ifndef DS_FIXED
#define DS_FIXED

#include "common"
#include "traits/iterable"

namespace ds {

template <size_t size_, typename E> class Fixed;

namespace traits {

	template <size_t size_, typename E>
	struct iterable<Fixed<size_,E>> : public iterable_traits<
			  E
			, size_t
			, E *
			, E const *
			, E *
			, E const *
			, E *
			, E const *
		> 
	{};

	template <size_t size_, typename E>
	struct iterable<Fixed<size_,E> const> : public iterable_traits<
			  E
			, size_t
			, void
			, E const *
			, void
			, E const *
			, void
			, E const *
		> 
	{};


	template <size_t size_, typename E>
	struct iterable<Fixed<size_,E &>> : public iterable_traits<
			  E &
			, size_t
			, typename Fixed<size_,E &>::Iterator
			, typename Fixed<size_,E &>::ConstIterator
			, typename Fixed<size_,E &>::Iterator
			, typename Fixed<size_,E &>::ConstIterator
			, typename Fixed<size_,E &>::Iterator
			, typename Fixed<size_,E &>::ConstIterator
		> 
	{};

	template <size_t size_, typename E>
	struct iterable<Fixed<size_,E &> const> : public iterable_traits<
			  E
			, size_t
			, void
			, typename Fixed<size_,E &>::ConstIterator
			, void
			, typename Fixed<size_,E &>::ConstIterator
			, void
			, typename Fixed<size_,E &>::ConstIterator
		> 
	{};

} // namespace trait


template <size_t size_, typename E>
class Fixed
{
 public:
	using array_t = E[size_];

 protected:
	array_t m_array {};

 public:
	struct index_out_of_bounds : public exception
	{
		char const * 
		what() const noexcept override
		{
			return "fixed array index out of bounds";
		}
	};

	constexpr Fixed() = default;
	constexpr Fixed(Fixed &&) = default;
	constexpr Fixed(Fixed const &) = default;

	template <typename T, typename... Ts
			, enable_if_t<((sizeof...(Ts)+1 < size_) 
				&& are_all_true<is_constructible<E>
				              , is_aggregate_initializable<E,T>
				              , is_aggregate_initializable<E,Ts>...>::value),int> = 0
		>
	constexpr Fixed(T && value, Ts &&... values)
		: m_array { { ds::forward<T>(value) }, { ds::forward<Ts>(values) }... }
	{}

	template <typename T, typename... Ts
			, enable_if_t<((sizeof...(Ts)+1 == size_) 
				&& are_all_true<is_aggregate_initializable<E,T>
				              , is_aggregate_initializable<E,Ts>...>::value),int> = 0
		>
	constexpr Fixed(T && value, Ts &&... values)
		: m_array { { ds::forward<T>(value) }, { ds::forward<Ts>(values) }... }
	{}

	template <class F
			, typename = decltype(decl<E &>() = decl<F>()())
		>
	constexpr Fixed(F && func)
		: m_array {}
	{
		for(auto & e : m_array)
			e = func();
	}

	Fixed & operator=(Fixed &&) = default;
	Fixed & operator=(Fixed const &) = default;

	constexpr E       & operator[](size_t index)       noexcept { return m_array[index]; }
	constexpr E const & operator[](size_t index) const noexcept { return m_array[index]; }
	
	constexpr E & 
	at(size_t index) noexcept(false)
	{
		ds_throw_if(index >= size_, index_out_of_bounds());
		return m_array[index];
	}

	constexpr E const & 
	at(size_t index) const noexcept(false)
	{
		ds_throw_if(index >= size_, index_out_of_bounds());
		return m_array[index];
	}

	constexpr array_t       & array()       noexcept { return m_array; }
	constexpr array_t const & array() const noexcept { return m_array; }

	constexpr size_t size()       noexcept { return size_; }
	constexpr size_t size() const noexcept { return size_; }
	
	constexpr E       * begin()       noexcept { return &m_array[0]; }
	constexpr E const * begin() const noexcept { return &m_array[0]; }
	constexpr E       * end  ()       noexcept { return &m_array[size_]; }
	constexpr E const * end  () const noexcept { return &m_array[size_]; }
	
	inline E       * rbegin()       noexcept { return &m_array[size_-1]; }
	inline E const * rbegin() const noexcept { return &m_array[size_-1]; }
	inline E       * rend  ()       noexcept { return &m_array[0]-1; }
	inline E const * rend  () const noexcept { return &m_array[0]-1; }
	
};


template <size_t size_, typename E>
class Fixed<size_,E &>
{
 public:
	using array_t = E * [size_];

 protected:
	array_t m_array {};

 public:
	struct index_out_of_bounds : public exception
	{
		char const * 
		what() const noexcept override
		{
			return "fixed array index out of bounds";
		}
	};

	struct Iterator
	{
		E ** current = nullptr;
		
		constexpr Iterator & operator++()    { ++current; return *this; }
		constexpr Iterator   operator++(int) { return { current++ }; }
		
		constexpr Iterator & operator--()    { --current; return *this; }
		constexpr Iterator   operator--(int) { return { current-- }; }

		constexpr E       & operator*()       { return **current; }
		constexpr E const & operator*() const { return **current; }

		constexpr E       & operator[](size_t index_)       { return *current[index_]; }
		constexpr E const & operator[](size_t index_) const { return *current[index_]; }

		constexpr ptrdiff_t operator-(Iterator const & rhs)       { return ptrdiff_t(current - rhs.current); }
		constexpr ptrdiff_t operator-(Iterator const & rhs) const { return ptrdiff_t(current - rhs.current); }

		constexpr Iterator operator-(size_t rhs)       { return { current - rhs }; }
		constexpr Iterator operator-(size_t rhs) const { return { current - rhs }; }

		constexpr Iterator operator+(size_t rhs)       { return { current + rhs }; }
		constexpr Iterator operator+(size_t rhs) const { return { current + rhs }; }

		constexpr bool operator<(Iterator const & rhs)       { return current < rhs.current; }
		constexpr bool operator<(Iterator const & rhs) const { return current < rhs.current; }

		constexpr bool operator>(Iterator const & rhs)       { return current > rhs.current; }
		constexpr bool operator>(Iterator const & rhs) const { return current > rhs.current; }

		constexpr bool operator<=(Iterator const & rhs)       { return current <= rhs.current; }
		constexpr bool operator<=(Iterator const & rhs) const { return current <= rhs.current; }

		constexpr bool operator>=(Iterator const & rhs)       { return current >= rhs.current; }
		constexpr bool operator>=(Iterator const & rhs) const { return current >= rhs.current; }

		constexpr bool operator==(Iterator const & rhs)       { return current == rhs.current; }
		constexpr bool operator==(Iterator const & rhs) const { return current == rhs.current; }

		constexpr bool operator!=(Iterator const & rhs)       { return current != rhs.current; }
		constexpr bool operator!=(Iterator const & rhs) const { return current != rhs.current; }

		constexpr bool operator!()       { return current == nullptr; }
		constexpr bool operator!() const { return current == nullptr; }

		constexpr explicit operator bool()       { return current != nullptr; }
		constexpr explicit operator bool() const { return current != nullptr; }

	};

	struct ConstIterator
	{
		E * const * current = nullptr;
		
		constexpr ConstIterator & operator++()    { ++current; return *this; }
		constexpr ConstIterator   operator++(int) { return { current++ }; }
		
		constexpr ConstIterator & operator--()    { --current; return *this; }
		constexpr ConstIterator   operator--(int) { return { current-- }; }

		constexpr E const & operator*() const { return **current; }

		constexpr E const & operator[](size_t index_) const { return *current[index_]; }

		constexpr ptrdiff_t operator-(ConstIterator const & rhs)       { return ptrdiff_t(current - rhs.current); }
		constexpr ptrdiff_t operator-(ConstIterator const & rhs) const { return ptrdiff_t(current - rhs.current); }

		constexpr ConstIterator operator-(size_t rhs)       { return { current - rhs }; }
		constexpr ConstIterator operator-(size_t rhs) const { return { current - rhs }; }

		constexpr ConstIterator operator+(size_t rhs)       { return { current + rhs }; }
		constexpr ConstIterator operator+(size_t rhs) const { return { current + rhs }; }

		constexpr bool operator<(ConstIterator const & rhs)       { return current < rhs.current; }
		constexpr bool operator<(ConstIterator const & rhs) const { return current < rhs.current; }

		constexpr bool operator>(ConstIterator const & rhs)       { return current > rhs.current; }
		constexpr bool operator>(ConstIterator const & rhs) const { return current > rhs.current; }

		constexpr bool operator<=(ConstIterator const & rhs)       { return current <= rhs.current; }
		constexpr bool operator<=(ConstIterator const & rhs) const { return current <= rhs.current; }

		constexpr bool operator>=(ConstIterator const & rhs)       { return current >= rhs.current; }
		constexpr bool operator>=(ConstIterator const & rhs) const { return current >= rhs.current; }

		constexpr bool operator==(ConstIterator const & rhs)       { return current == rhs.current; }
		constexpr bool operator==(ConstIterator const & rhs) const { return current == rhs.current; }

		constexpr bool operator!=(ConstIterator const & rhs)       { return current != rhs.current; }
		constexpr bool operator!=(ConstIterator const & rhs) const { return current != rhs.current; }

		constexpr bool operator!()       { return current == nullptr; }
		constexpr bool operator!() const { return current == nullptr; }

		constexpr explicit operator bool()       { return current != nullptr; }
		constexpr explicit operator bool() const { return current != nullptr; }

	};

	constexpr Fixed() = default;
	constexpr Fixed(Fixed &&) = default;
	constexpr Fixed(Fixed const &) = default;

	template <typename T, typename... Ts
			, enable_if_t<((sizeof...(Ts)+1 <= size_) 
				&& are_all_true<is_constructible<E,decltype(&decl<T>())>
				              , is_constructible<E,decltype(&decl<Ts>())>...>::value)
			,int> = 0
		>
	constexpr Fixed(T && value, Ts &&... values)
		: m_array { static_cast<E *>(&value), static_cast<E *>(&values)... }
	{}

	Fixed & operator=(Fixed &&) = default;
	Fixed & operator=(Fixed const &) = default;

	constexpr E       & operator[](size_t index)       noexcept { return *m_array[index]; }
	constexpr E const & operator[](size_t index) const noexcept { return *m_array[index]; }
	
	constexpr E & 
	at(size_t index) noexcept(false)
	{
		ds_throw_if(index >= size_, index_out_of_bounds());
		return *m_array[index];
	}

	constexpr E const & 
	at(size_t index) const noexcept(false)
	{
		ds_throw_if(index >= size_, index_out_of_bounds());
		return *m_array[index];
	}

	constexpr array_t       & array()       noexcept { return m_array; }
	constexpr array_t const & array() const noexcept { return m_array; }

	constexpr size_t size()       noexcept { return size_; }
	constexpr size_t size() const noexcept { return size_; }
	
	constexpr Iterator       begin()       noexcept { return { &m_array[0] }; }
	constexpr ConstIterator  begin() const noexcept { return { &m_array[0] }; }
	constexpr Iterator       end  ()       noexcept { return { &m_array[size_] }; }
	constexpr ConstIterator  end  () const noexcept { return { &m_array[size_] }; }
	
	inline Iterator       rbegin()       noexcept { return { &m_array[size_-1] }; }
	inline ConstIterator  rbegin() const noexcept { return { &m_array[size_-1] }; }
	inline Iterator       rend  ()       noexcept { return { &m_array[0]-1 }; }
	inline ConstIterator  rend  () const noexcept { return { &m_array[0]-1 }; }
	
};


template <size_t size_, typename E> 
using fixed = Fixed<size_,E>;


template <size_t size_, typename E>
struct usage<Fixed<size_,E>> 
{
	static constexpr size_t value = sizeof(E) * size_ + usage_n<E,size_>::value; 
};

template <size_t size_, typename E, size_t count_>
struct usage_n<Fixed<size_,E>,count_>
{
	static constexpr size_t _single = usage<Fixed<size_,E>>::value;
	static constexpr size_t _offset = (~_single+1) & (alignof(E) - 1);
	static constexpr size_t value   = (_single + _offset) * count_;
};


template <size_t size_, typename E>
struct inserter<Fixed<size_,E>,E>
{
	Fixed<size_,E> & _fixed;
	size_t i = 0;
	
	constexpr bool
	init(size_t required_size)
	{
		if(required_size > size_)
			return false;
		_fixed = {};
		return true;
	}

	template <typename T, enable_if_t<is_constructible<E,T>::value,int> = 0>
	constexpr bool 
	insert(T && object)
	{
		if(i >= size_)
			return false;
		auto & e = _fixed[i++];
		destruct(e);
		construct_at<E>(&e, ds::forward<T>(object));
		return true;
	}
};


template <typename E, typename T, typename... Ts
	, enable_if_t<is_constructible<Fixed<sizeof...(Ts)+1,E>,T,Ts...>::value,int> = 0> 
static constexpr Fixed<sizeof...(Ts)+1,E>
make_fixed(T && value, Ts &&... values)
{
	return { ds::forward<T>(value), ds::forward<Ts>(values)... };
}

template <size_t size_, typename E, typename T, typename... Ts
	, enable_if_t<is_constructible<Fixed<size_,E>,T,Ts...>::value,int> = 0>
static constexpr Fixed<size_,E>
make_fixed(T && value, Ts &&... values)
{
	return { ds::forward<T>(value), ds::forward<Ts>(values)... };
}

}  // namespace ds

#endif // DS_FIXED
