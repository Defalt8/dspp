#pragma once
#ifndef DS_THREAD
#define DS_THREAD

#ifdef _WIN32
#	define WIN32_LEAN_AND_MEAN
#	include <Windows.h>
#else
#	include <pthread.h>
#endif

#include "common"
#include "sys"
#include "mutex"
#include "semaphore"
#include "string"
#include "persistent"
#include "callable"

namespace ds {

struct ThreadParams;
struct ThreadInfo;
class  Thread;

struct ThreadParams
{
	using affinity_t = uint64_t;

	// max-size 15
	nt_string<> name     = "ds_thread"_dsstrv; 
	affinity_t  affinity = 0;

	ThreadParams() = default;
	
	ThreadParams(affinity_t affinity_, String<> name_)
		: name     { ds::move(name_) }
		, affinity { affinity_ }
	{}

};

struct ThreadInfo
{
 public:
  #ifdef _WIN32
	using handle_t = HANDLE;
  #else
	using handle_t = pthread_t;
  #endif
	using affinity_t = ThreadParams::affinity_t;
	using routine_t  = Callable<void()>;

	friend class Thread;

 private:
	Mutex        _mutex   {};
	Semaphore    _sem     {};
	routine_t    _routine {};
  #ifdef _WIN32
	handle_t     _handle  = INVALID_HANDLE_VALUE;
  #else
	handle_t     _handle  {};
	bool         _is_init = false;
  #endif
	bool         _is_running     = false;
	bool         _is_terminating = false;
	bool         _is_detatched   = false;
	ThreadParams _params {};
	size_t       _id     = 0;
	
	ThreadInfo(ThreadInfo &&) = delete;
	ThreadInfo(ThreadInfo const &) = delete;

 public:
	ThreadInfo() = default;

	template <typename... Args
			, enable_if_t<is_constructible<routine_t,Args...>::value,int> = 0
		>
	ThreadInfo(Args &&... callable_args)
		: _routine { ds::forward<Args>(callable_args)... }
	{}

	template <typename... Args>
	ThreadInfo(ThreadParams params_, Args &&... callable_args)
		: _routine { ds::forward<Args>(callable_args)... }
		, _params  { ds::move(params_) }
	{}

	void
	swap(ThreadInfo & rhs) noexcept
	{
		ds::swap(_mutex, rhs._mutex);
		ds::swap(_routine, rhs._routine);
	  #ifdef _WIN32
		ds::swap(_handle, rhs._handle);
	  #else
		ds::swap(_handle, rhs._handle);
		ds::swap(_is_init, rhs._is_init);
	  #endif
		ds::swap(_is_running, rhs._is_running);
		ds::swap(_is_terminating, rhs._is_terminating);
		ds::swap(_id, rhs._id);
	}

	bool is_running()     const noexcept { return _is_running; }
	bool is_terminating() const noexcept { return _is_terminating; }
	
	Mutex              & mutex()          noexcept { return _mutex; }
	Mutex        const & mutex()    const noexcept { return _mutex; }
	handle_t     const & handle()   const noexcept { return _handle; }
	ThreadParams const & params()   const noexcept { return _params; }
	string_view          name()     const noexcept { return _params.name.view(); }
	affinity_t   const & affinity() const noexcept { return _params.affinity; }
	size_t               id()       const noexcept { return _id; }

  #ifdef _WIN32
	inline bool operator!()         const noexcept { return _handle == INVALID_HANDLE_VALUE; }
	explicit inline operator bool()       noexcept { return _handle != INVALID_HANDLE_VALUE; }
	explicit inline operator bool() const noexcept { return _handle != INVALID_HANDLE_VALUE; }
  #else
	inline bool operator!()         const noexcept { return !_is_init; }
	explicit inline operator bool()       noexcept { return _is_init; }
	explicit inline operator bool() const noexcept { return _is_init; }
  #endif

};

class Thread
{
 public:
	using handle_t  = ThreadInfo::handle_t;
	using routine_t = ThreadInfo::routine_t;

 private:
	Mutex                   _mutex;
	Persistent<ThreadInfo>  _info {};

	Thread(Thread const &) = delete;
 
  #ifndef _WIN32
	cpu_set_t
	_get_cpu_set() const noexcept
	{
		cpu_set_t cpu_set;
		CPU_ZERO(&cpu_set);
		auto bit_count = ds::sys::nprocessors();
		auto mask_     = uint64_t(1);
		for(size_t i = 0; i < bit_count; ++i, mask_ <<= 1)
		{
			if(_info->_params.affinity & mask_)
			{
				CPU_SET(i, &cpu_set);
			}
		}
		return ds::move(cpu_set);
	}
  #endif

	void
	_create() noexcept(false)
	{
	  #ifdef _WIN32
		if(_info && _info->_routine)
		{
			auto & info_mutex = _info->_mutex;
			if(!_release_and_lock(info_mutex))
			{
				ds_throw(lock_failure());
				return;
			}
			{
				DWORD id_;
				_info->_handle = ::CreateThread(nullptr, 0, _routine_impl, &_info, 0, &id_);
				_info->_id     = size_t(id_);
			}
			_info->_sem.await();
			info_mutex.release();
		}
	  #else
		if(_info && _info->_routine)
		{
			auto & info_mutex = _info->_mutex;
			if(!_release_and_lock(info_mutex))
			{
				ds_throw(lock_failure());
				return;
			}
			::pthread_attr_t attr;
			::pthread_attr_init(&attr);
			auto cpu_set = _get_cpu_set();
			::pthread_attr_setaffinity_np(&attr, sizeof(cpu_set), &cpu_set);
			auto & _handle  = _info->_handle;
			auto & _params  = _info->_params;
			auto & _is_init = _info->_is_init;
			_is_init = ::pthread_create(&_handle, nullptr, _routine_impl, &_info) == 0;
			if(_is_init)
			{
				_info->_id = size_t(_handle);
				if(_params.name.size() > 0)
					::pthread_setname_np(_handle, _params.name.begin());
			}
			_info->_sem.await();
			info_mutex.release();
		}
	  #endif
	}

	bool 
	_join(handle_t & handle_) noexcept
	{
	  #if _WIN32
		return ::WaitForSingleObject(handle_, INFINITE) == WAIT_OBJECT_0;
	  #else
		return ::pthread_join(handle_, nullptr) == 0;
	  #endif
	}

	static inline bool
	_release_and_lock(Mutex & mutex) noexcept
	{
		mutex.release();
		return mutex.lock();
	}
	
  #ifdef _WIN32

	static DWORD __stdcall 
	_routine_impl(void * data) noexcept
	{
		Persistent<ThreadInfo> * thread_info = static_cast<Persistent<ThreadInfo> *>(data);
		if(thread_info != nullptr)
		{
			Thread::current = *thread_info;
			auto & info     = Thread::current;
			if(info)
			{
				if(_release_and_lock(info->_mutex))
				{
					if(!info->_routine)
					{
						info->_mutex.release();
						return 0;
					}
					info->_is_running = true;
					// settings
					{
						auto const & _params = info->_params;
						{
							using dword_ptr_t = DWORD_PTR;
							dword_ptr_t affinity = dword_ptr_t(_params.affinity);
							SetThreadAffinityMask(info->_handle, affinity);
						}
						if(_params.name.size() > 0)
						{
							constexpr size_t  _max_size_ = 15;
							wchar_t _buffer[_max_size_ + 1] {};
							size_t  min_size  = min(_max_size_, _params.name.size());
							size_t  i         = 0;
							char const * cstr = _params.name.begin();
							for(; i < min_size; ++i)
								_buffer[i] = wchar_t(cstr[i]);
							_buffer[_max_size_] = L'\0';
							if(i > 0)
								::SetThreadDescription(info->_handle, &_buffer[0]);
						}
					}
					info->_mutex.release();
					info->_sem.signal();
					info->_routine();
					if(info && info->_mutex.lock())
					{
						info->_is_terminating = false;
						info->_is_running     = false;
						info->_mutex.release();
					}
				}
			}
			return 0;
		} 
		return -1;
	}

  #else

	static void * 
	_routine_impl(void * data) noexcept
	{
		Persistent<ThreadInfo> * thread_info = static_cast<Persistent<ThreadInfo> *>(data);
		if(thread_info != nullptr)
		{
			Thread::current = *thread_info;
			auto & info     = Thread::current;
			if(info)
			{
				if(_release_and_lock(info->_mutex))
				{
					if(!info->_routine)
					{
						info->_mutex.release();
						return 0;
					}
					info->_is_running = true;
					info->_mutex.release();
					info->_sem.signal();
					info->_routine();
					if(info && info->_mutex.lock())
					{
						info->_is_terminating = false;
						info->_is_running     = false;
						info->_mutex.release();
					}
				}
			}
		} 
		return nullptr;
	}

  #endif

 public:
	static thread_local Persistent<ThreadInfo> current;

 public:
	struct creation_failure : exception 
	{
		char const * what() const noexcept { return "thread creation failure"; }
	};

	struct lock_failure : exception 
	{
		char const * what() const noexcept { return "thread mutex-lock failure"; }
	};

	~Thread() noexcept
	{
		this->destroy();
	}

	Thread(Thread && rhs) noexcept
		: _mutex { true }
		, _info  { _release_and_lock(rhs._mutex) && (rhs._info && _release_and_lock(rhs._info->_mutex)) 
					? ds::move(rhs._info) 
					: ds::move(rhs._info) 
			}
	{
		if(_info)
			_info->_mutex.release();
		rhs._mutex.release();
		_mutex.release();
	}

	template <typename... Args
			, enable_if_t<is_constructible<routine_t,Args...>::value,int> = 0
		>
	Thread(Args &&... callable_args) noexcept(false)
		: _mutex { true }
		, _info(ds::forward<Args>(callable_args)...)
	{
		this->_create();
		_mutex.release();
	}

	template <typename... Args
			, enable_if_t<is_constructible<routine_t,Args...>::value,int> = 0
		>
	Thread(ThreadParams params_, Args &&... callable_args) noexcept(false)
		: _mutex { true }
		, _info(ds::move(params_), ds::forward<Args>(callable_args)...)
	{
		this->_create();
		_mutex.release();
	}

	Thread &
	operator=(Thread && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->~Thread();
			construct_at<Thread>(this, ds::move(rhs));
		}
		return *this;
	}

	void 
	destroy(bool join_ = true) noexcept
	{
		if(this->terminate(join_) 
			&& _release_and_lock(_mutex))
		{
			if(_info)
			{
				auto & info_mutex = _info->_mutex;
				if(_release_and_lock(info_mutex))
				{
				#ifdef _WIN32
					::CloseHandle(_info->_handle);
				#endif
					_info->_is_detatched = true;
					info_mutex.release();
					_info.destroy();
				}
			}
			_mutex.release();
		}
	}

	void 
	detach() noexcept
	{
		if(_release_and_lock(_mutex) && _info)
		{
			auto & info_mutex = _info->_mutex;
			if(_release_and_lock(info_mutex))
			{
			  #ifdef _WIN32
				::CloseHandle(_info->_handle);
			  #endif
				_info->_is_detatched = true;
				info_mutex.release();
				_info.destroy();
			}
			_mutex.release();
		}
	}

	void
	swap(Thread & rhs) noexcept
	{
		_release_and_lock(_mutex);
		_release_and_lock(rhs._mutex);
		if(_info)
			_release_and_lock(_info->_mutex);
		if(rhs._info)
			_release_and_lock(rhs._info->_mutex);
		ds::swap(_info, rhs._info);
		if(_info)
			_info->_mutex.release();
		if(rhs._info)
			rhs._info->_mutex.release();
		rhs._mutex.release();
		_mutex.release();
	}

	bool 
	terminate(bool join_ = true) noexcept
	{
		if(_release_and_lock(_mutex) && _info)
		{
			auto & info_mutex = _info->_mutex;
			if(_release_and_lock(info_mutex))
			{
				auto & _is_terminating = _info->_is_terminating;
				if(_is_terminating && !join_) 
				{
					info_mutex.release();
					_mutex.release();
					return true;
				}
				_is_terminating = true;
				if(join_) 
				{
					auto & handle_ = _info->_handle;
					info_mutex.release();
					_mutex.release();
					return this->_join(handle_);
				}
				info_mutex.release();
				_mutex.release();
				return true;
			}
			_mutex.release();
		}
		return false;
	}

	bool 
	join() noexcept
	{
		if(_release_and_lock(_mutex))
		{
			if(_info)
			{
				auto & info_mutex = _info->_mutex;
				_release_and_lock(info_mutex);
				auto & handle_ = _info->_handle;
				_mutex.release();
				info_mutex.release();
				return this->_join(handle_);
			}
			_mutex.release();
		}
		return false;
	}

	bool 
	is_running() noexcept 
	{
		if(_release_and_lock(_mutex) && _info)
		{
			auto & info_mutex = _info->_mutex;
			_release_and_lock(info_mutex);
			auto ret = _info->_is_running; 
			info_mutex.release();
			_mutex.release();
			return ret;
		}
		return false;
	}

	bool 
	is_terminating() noexcept 
	{
		if(_release_and_lock(_mutex) && _info)
		{
			auto & info_mutex = _info->_mutex;
			_release_and_lock(info_mutex);
			auto ret = _info->_is_terminating; 
			info_mutex.release();
			_mutex.release();
			return ret;
		}
		return false;
	}

	bool 
	is_detatched() noexcept 
	{
		if(_release_and_lock(_mutex) && _info)
		{
			auto & info_mutex = _info->_mutex;
			_release_and_lock(info_mutex);
			auto ret = _info->_is_detatched; 
			info_mutex.release();
			_mutex.release();
			return ret;
		}
		return false;
	}

	
	ThreadInfo       & info()       noexcept(false) { return _info.ref(); }
	ThreadInfo const & info() const noexcept(false) { return _info.ref(); }
	Mutex            & mutex()        noexcept { return _mutex; }
	Mutex      const & mutex()  const noexcept { return _mutex; }

	inline bool operator!()         const noexcept { return !_info || !(*_info); }
	explicit inline operator bool()       noexcept { return bool(_info) && bool(*_info); }
	explicit inline operator bool() const noexcept { return bool(_info) && bool(*_info); }

}; 

thread_local Persistent<ThreadInfo> Thread::current { noinit };

using thread_params = ThreadParams;
using thread        = Thread;

} // namespace ds

#endif // DS_THREAD
