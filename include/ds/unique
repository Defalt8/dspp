#pragma once
#ifndef DS_UNIQUE
#define DS_UNIQUE

#include "common"
#include "traits/allocator"
#include "traits/iterable"
#include "allocator"

namespace ds {

template <typename T, class A = default_allocator> class Unique;
template <typename T, class A> class Shared;
template <typename T, class A> class Persistent;

namespace traits {

	template <size_t size_, typename E>
	struct iterable<Unique<E[size_]>> : public iterable_traits<
			  E
			, size_t
			, E *
			, E const *
			, E *
			, E const *
			, E *
			, E const *
		> 
	{};

	template <size_t size_, typename E>
	struct iterable<Unique<E[size_]> const> : public iterable_traits<
			  E
			, size_t
			, void
			, E const *
			, void
			, E const *
			, void
			, E const *
		> 
	{};

	template <typename T, class A>
	struct allocator<Unique<T,A>> : public allocator_traits<A> {};

	template <typename T, class A>
	struct allocator<Unique<T,A> const> : public allocator_traits<A> {};

} // namespace trait

namespace _ {
	template <typename T, class A, bool = is_constructible<T>::value>
	struct _default_construct_unique
	{
		static inline T * construct() { return nullptr; }
	};

	template <typename T, class A>
	struct _default_construct_unique<T,A,true>
	{
		static inline T * construct() { return construct_at_safe<T>(A::allocate(sizeof(T), alignof(T))); }
	};
} // namespace _

/// @brief  Manages the dynamic lifetime of an object of type `T`.  
/// @brief   The object is destroyed when this `Unique` instance is destroyed.  
/// @brief   No copies; Only moves are allowed.
/// @tparam T object type.
/// @tparam A allocator type. default is `default_allocator`
template <typename T, class A>
class Unique
{
	friend class Shared<T,A>;
	friend class Persistent<T,A>;

	T * _ptr = nullptr;

	static inline void
	_deallocate(void * block_) noexcept
	{
		A::deallocate(block_);
	}

	DS_nodiscard static inline void * 
	_allocate(size_t size_, align_t align_)
	{
		return A::allocate(size_, align_);
	}

	struct impossible_t
	{};

	template <class C>
	inline bool 
	_compare(impossible_t const &, C &&) const noexcept
	{
		return false;
	} 

	template <class C>
	inline bool 
	_compare(Unique const & rhs, C && compare_) const noexcept
	{
		auto const & lhs = *this;
		return (lhs && rhs) ? compare_(*lhs, *rhs) : false;
	} 

	Unique(Unique const &) = delete;

 public:
	struct null_pointer : public exception
	{
		char const * what() const noexcept { return "null pointer"; }
	};

	~Unique() noexcept
	{
		this->destroy();
	}

	Unique(Unique && rhs) noexcept
		: _ptr { rhs._ptr }
	{
		rhs._ptr = nullptr;
	}

	Unique(noinit_t)
	{}

	Unique()
		: _ptr { _::_default_construct_unique<T,A>::construct() }
	{}

	template <typename D, typename... Args
			, enable_if_t<
				   is_constructible<D,Args...>::value 
				&& is_virtually_destructible<T>::value
				&& is_static_castable<D &,T &>::value
				, int
			> = 0
		>
	Unique(make<D> type, Args &&... args)
		: _ptr { construct_at_safe<D>(_allocate(sizeof(D), alignof(D)), ds::forward<Args>(args)...) }
	{}

	template <typename Arg, typename... Args
			, enable_if_t<!is_same<remove_cvref_t<Arg>,Unique>::value,int> = 0
			, enable_if_t<is_constructible<T,Arg,Args...>::value,int> = 0
		>
	Unique(Arg && arg, Args &&... args)
		: _ptr { construct_at_safe<T>(_allocate(sizeof(T), alignof(T))
				, ds::forward<Arg>(arg), ds::forward<Args>(args)...) }
	{}

	Unique & 
	operator=(Unique && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}
	
	inline bool operator!() const noexcept { return _ptr == nullptr; }

	explicit inline operator bool()        noexcept { return _ptr != nullptr; }
	explicit inline operator bool()  const noexcept { return _ptr != nullptr; }

	inline T       & operator*()        noexcept { return *_ptr; }
	inline T const & operator*()  const noexcept { return *_ptr; }
	
	inline T       * operator->()       noexcept { return _ptr; }
	inline T const * operator->() const noexcept { return _ptr; }
	
	inline T       * ptr()       noexcept { return _ptr; }
	inline T const * ptr() const noexcept { return _ptr; }

	T & 
	ref() noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		return *_ptr;
	}

	T const & 
	ref() const noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		return *_ptr;
	}

	void 
	destroy() noexcept
	{
		if(_ptr)
		{
			destruct(*_ptr);
			_deallocate(_ptr);
			_ptr = nullptr;
		}
	}

	inline void 
	swap(Unique & rhs) noexcept
	{
		ds::swap(_ptr, rhs._ptr);
	}

	inline bool 
	operator==(conditional_t<is_eq_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, equal<T>()); 
	}

	inline bool 
	operator!=(conditional_t<is_neq_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, not_equal<T>()); 
	}

	inline bool 
	operator<=(conditional_t<is_leq_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less_or_equal<T>()); 
	}

	inline bool 
	operator>=(conditional_t<is_geq_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater_or_equal<T>()); 
	}

	inline bool 
	operator<(conditional_t<is_lt_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less<T>()); 
	}

	inline bool 
	operator>(conditional_t<is_gt_comparable<T>::value,Unique,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater<T>()); 
	}


};

template <typename E, size_t size_, class A>
class Unique<E[size_],A>
{
	using array_t = E[size_];
	using impossible_t = struct {};

	array_t * _ptr = nullptr;

	static inline void
	_deallocate(void * block_) noexcept
	{
		A::deallocate(block_);
	}

	DS_nodiscard static inline void * 
	_allocate(size_t msize_, align_t align_)
	{
		return A::allocate(msize_, align_);
	}

	Unique(Unique const &) = delete;

	DS_constexpr14 void
	_destruct() noexcept
	{
		if DS_constexpr17 (!is_trivially_destructible<E>::value)
		{
			for(auto & e : *_ptr)
				destruct(e);
		}
	}

	inline void
	_default_construct(conditional_t<is_constructible<E>::value 
			&& !is_trivially_constructible<E>::value,array_t,impossible_t> & array_, size_t start_ = 0)
	{
		for(size_t i = start_; i < size_; ++i)
			construct_at<E>(&array_[i]);
	}

	inline void 
	_default_construct(conditional_t<!is_constructible<E>::value 
			|| is_trivially_constructible<E>::value,array_t,impossible_t> & array_, size_t start_ = 0) 
	{
		memset(&array_[start_], 0, sizeof(E) * (size_ - start_));
	}

 public:
	struct null_pointer : public exception
	{
		char const * what() const noexcept { return "null pointer"; }
	};

	struct index_out_of_bounds : public exception
	{
		char const * 
		what() const noexcept override
		{
			return "unique array index out of bounds";
		}
	};

	~Unique() noexcept
	{
		if(_ptr)
		{
			_destruct();
			_deallocate(_ptr);
		}
	}

	Unique(Unique && rhs) noexcept
		: _ptr { rhs._ptr }
	{
		rhs._ptr = nullptr;
	}

	Unique(noinit_t)
	{}

	Unique()
		: _ptr { static_cast<array_t *>(_allocate(sizeof(E) * size_, alignof(E))) }
	{
		if(_ptr)
			_default_construct(*_ptr);
	}

	template <typename T = E, enable_if_t<is_constructible<E,T>::value,int> = 0>
	Unique(T && fill_object)
		: _ptr { static_cast<array_t *>(_allocate(sizeof(E) * size_, alignof(E))) }
	{
		if(_ptr)
		{
			for(size_t i = 0; i < size_; ++i)
				construct_at<E>(&(*_ptr)[i], fill_object);
		}
	}

	template <typename T = E, size_t tsize_
			, enable_if_t<tsize_ <= size_,int> = 0
			, enable_if_t<is_constructible<E,T &&>::value,int> = 0
		>
	Unique(T (&& array_)[tsize_])
		: _ptr { static_cast<array_t *>(_allocate(sizeof(E) * size_, alignof(E))) }
	{
		if(_ptr)
		{
			for(size_t i = 0; i < tsize_; ++i)
				construct_at<E>(&(*_ptr)[i], ds::move(array_[i]));
			if(tsize_ < size_)
				_default_construct(*_ptr, tsize_);
		}
	}

	template <typename It, enable_if_t<is_constructible<E,decltype(*decl<It>())>::value,int> = 0>
	Unique(It && begin_, It && end_)
		: _ptr { static_cast<array_t *>(_allocate(sizeof(E) * size_, alignof(E))) }
	{
		if(_ptr)
		{
			size_t i = 0;
			for(auto it = begin_; it != end_; ++it, ++i)
				construct_at<E>(&(*_ptr)[i], *it);
			if(i < size_)
				_default_construct(*_ptr, i);
		}
	}

	template <typename It, typename T = E
			, enable_if_t<is_constructible<E,decltype(*decl<It>())>::value,int> = 0
			, enable_if_t<is_constructible<E,T>::value,int> = 0
		>
	Unique(It && begin_, It && end_, T && fill_object)
		: _ptr { static_cast<array_t *>(_allocate(sizeof(E) * size_, alignof(E))) }
	{
		if(_ptr)
		{
			size_t i = 0;
			for(auto it = begin_; it != end_; ++it, ++i)
				construct_at<E>(&(*_ptr)[i], *it);
			for(; i < size_; ++i)
				construct_at<E>(&(*_ptr)[i], fill_object);
		}
	}

	Unique & 
	operator=(Unique && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}
	
	inline bool operator!() const noexcept { return _ptr == nullptr; }

	explicit inline operator bool()        noexcept { return _ptr != nullptr; }
	explicit inline operator bool()  const noexcept { return _ptr != nullptr; }

	inline E       & operator[](size_t index_)        noexcept { return (*_ptr)[index_]; }
	inline E const & operator[](size_t index_)  const noexcept { return (*_ptr)[index_]; }

	inline array_t       & operator*()        noexcept { return *_ptr; }
	inline array_t const & operator*()  const noexcept { return *_ptr; }
	
	inline array_t       * ptr()       noexcept { return _ptr; }
	inline array_t const * ptr() const noexcept { return _ptr; }

	inline size_t size()       noexcept { return size_; }
	inline size_t size() const noexcept { return size_; }
	
	inline E       * begin()       noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[0]; }
	inline E const * begin() const noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[0]; }
	inline E       * end  ()       noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[size_]; }
	inline E const * end  () const noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[size_]; }

	inline E       * rbegin()       noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[size_-1]; }
	inline E const * rbegin() const noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[size_-1]; }
	inline E       * rend  ()       noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[-1]; }
	inline E const * rend  () const noexcept { return _ptr == nullptr ? nullptr : &(*_ptr)[-1]; }

	inline E & 
	at(size_t index_) noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		ds_throw_if(index_ >= size_, index_out_of_bounds());
		return (*_ptr)[index_];
	}
	
	inline E const & 
	at(size_t index_)  const noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		ds_throw_if(index_ >= size_, index_out_of_bounds());
		return (*_ptr)[index_];
	}

	array_t & 
	ref() noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		return *_ptr;
	}

	array_t const & 
	ref() const noexcept(false)
	{
		ds_throw_if(_ptr == nullptr, null_pointer());
		return *_ptr;
	}

	void 
	destroy() noexcept
	{
		if(_ptr)
		{
			_destruct();
			_deallocate(_ptr);
			_ptr = nullptr;
		}
	}

	inline void 
	swap(Unique & rhs) noexcept
	{
		ds::swap(_ptr, rhs._ptr);
	}

};

// no const
template <typename T, class A> 
class Unique<T const,A>
{
	Unique() = delete;
};

// no references
template <typename T, class A> 
class Unique<T &,A>
{
	Unique() = delete;
};

// no unsized array types
template <typename T, class A> 
class Unique<T[],A>
{
	Unique() = delete;
};

template <typename T, class A = default_allocator> 
using unique = Unique<T,A>;

template <typename T, class A = default_nt_allocator> 
using nt_unique = Unique<T,A>;


template <typename T, class A>
struct usage<Unique<T,A>> 
{
	static constexpr size_t value = sizeof(T) + usage<T>::value; 
};

template <typename T, class A, size_t count_>
struct usage_n<Unique<T,A>,count_> 
{
	static constexpr size_t _single = usage<Unique<T,A>>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(T));
	static constexpr size_t value   = (_single + _offset) * count_; 
};


template <typename T, size_t size_, class A>
struct usage<Unique<T[size_],A>> 
{
	static constexpr size_t value = sizeof(T) * size_ + usage_s<T,size_>::value;
};

template <typename T, size_t size_, class A, size_t count_>
struct usage_n<Unique<T[size_],A>,count_> 
{
	static constexpr size_t _single = usage<Unique<T[size_],A>>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(T));
	static constexpr size_t value = (_single + _offset) * count_; 
};

template <typename E, class A>
struct Hasher<Unique<E,A>> : Hasher<E>
{
	static inline size_t hash(Unique<E,A> const & rhs) noexcept { return rhs ? Hasher<E>::hash(*rhs) : 0; }
};

template <typename E, class A>
struct OrderedHasher<Unique<E,A>> : OrderedHasher<E>
{
	static inline size_t hash(Unique<E,A> const & rhs) noexcept { return rhs ? OrderedHasher<E>::hash(*rhs) : 0; }
};


template <typename E, size_t size_, class A>
struct inserter<Unique<E[size_],A>,E>
{
	Unique<E[size_],A> & _unique;
	size_t i = 0;

	inline bool
	init(size_t required_size)
	{
		if(required_size > size_)
			return false;
		_unique = {};
		return true;
	}

	template <typename T, enable_if_t<is_constructible<E,T>::value,int> = 0>
	inline bool
	insert(T && object)
	{
		if(i >= size_)
			return false;
		auto & e = _unique[i++];
		destruct(e);
		construct_at<E>(&e, ds::forward<T>(object));
		return true;
	}

};

template <class OST, typename T, class A
		, enable_if_t<is_out_streamable<OST,decltype(decl<Unique<T,A> const &>().ref())>::value,int> = 0
	>
static OST &
operator<<(OST && ostream, Unique<T,A> const & rhs)
{
	return ostream << rhs.ref();
}


} // namespace ds

#endif // DS_UNIQUE
