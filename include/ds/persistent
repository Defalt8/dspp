#pragma once
#ifndef DS_PERSISTENT
#define DS_PERSISTENT

#include "common"
#include "traits/allocator"
#include "allocator"
#include "unique"

namespace ds {

template <typename T, class A = default_allocator> class Persistent;

namespace traits {

	template <typename T, class A>
	struct allocator<Persistent<T,A>> : public allocator_traits<A> {};

	template <typename T, class A>
	struct allocator<Persistent<T,A> const> : public allocator_traits<A> {};

} // namespace trait

namespace _ {
	template <typename T, class S, class A, bool = is_constructible<T>::value>
	struct _default_construct_persistent
	{
		static inline S * construct() { return nullptr; }
	};

	template <typename T, class S, class A>
	struct _default_construct_persistent<T,S,A,true>
	{
		static inline S * construct() { return construct_at_safe<S>(A::allocate(sizeof(S), alignof(S))); }
	};
} // namespace _

/// @brief  Manages the dynamic lifetime of an object of type `T`.  
/// @brief   The object is destroyed when the last `Persistent` instance
/// @brief    referencing the same object is destroyed.  
/// @brief   Both copies and moves are allowed.
/// @tparam T object type.
/// @tparam A allocator type. default is `default_allocator`
template <typename T, class A>
class Persistent
{
 public:
	using count_t = size_t;
	
	struct Storage
	{
		T     * object_ptr = nullptr;
		count_t references = 1;

		Storage(Storage &&) = delete;
		Storage(Storage const &) = delete;

		~Storage()
		{
			if(object_ptr)
			{
				destruct(*object_ptr);
				_deallocate(object_ptr);
			}
		}

		Storage(inplace<T *>, T * ptr_)
			: object_ptr { ptr_ }
		{}

		template <typename... Args>
		Storage(Args &&... args)
			: object_ptr { construct_at_safe<T>(_allocate(sizeof(T), alignof(T))
						 , ds::forward<Args>(args)...) }
		{}

		template <typename D, typename... Args>
		Storage(make<D> type, Args &&... args)
			: object_ptr { construct_at_safe<D>(_allocate(sizeof(D), alignof(D))
						 , ds::forward<Args>(args)...) }
		{}

	};

 private:
	Storage * _ptr = nullptr;

	static inline void
	_deallocate(void * block_) noexcept
	{
		A::deallocate(block_);
	}

	DS_nodiscard static inline void * 
	_allocate(size_t size_, align_t align_)
	{
		return A::allocate(size_, align_);
	}

	struct impossible_t
	{};

	template <class C>
	inline bool 
	_compare(impossible_t const &, C &&) const noexcept
	{
		return false;
	} 

	template <class C>
	inline bool 
	_compare(Persistent const & rhs, C && compare_) const noexcept
	{
		auto const & lhs = *this;
		return (lhs && rhs) ? compare_(*lhs, *rhs) : false;
	} 

 public:
	struct null_pointer : public exception
	{
		char const * what() const noexcept { return "null pointer"; }
	};

	~Persistent() noexcept
	{
		if(_ptr && --_ptr->references == 0)
		{
			destruct(*_ptr);
			_deallocate(_ptr);
		}
	}

	Persistent(noinit_t)
	{}

	Persistent()
		: _ptr { _::_default_construct_persistent<T,Storage,A>::construct() }
	{}

	template <typename D, typename... Args
			, enable_if_t<
				   is_constructible<D,Args...>::value 
				&& is_virtually_destructible<T>::value
				&& is_static_castable<D &,T &>::value
				, int
			> = 0
		>
	Persistent(make<D> type, Args &&... args)
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage))
				, type, ds::forward<Args>(args)...) }
	{}

	template <typename Arg, typename... Args
			, enable_if_t<!is_same<remove_cvref_t<Arg>,Persistent>::value,int> = 0
			, enable_if_t<is_constructible<T,Arg,Args...>::value,int> = 0
		>
	Persistent(Arg && arg, Args &&... args)
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage)), ds::forward<Arg>(arg), ds::forward<Args>(args)...) }
	{}

	Persistent(Unique<T,A> && unique_) noexcept
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage))
				, inplace<T *>(), unique_._ptr) }
	{
		unique_._ptr = nullptr;
	}

	Persistent(Persistent && rhs) noexcept
		: _ptr { rhs._ptr }
	{
		rhs._ptr = nullptr;
	}

	Persistent(Persistent const & rhs) noexcept
		: _ptr { rhs._ptr }
	{
		if(_ptr)
			++_ptr->references;
	}

	Persistent & 
	operator=(Persistent && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}

	Persistent & 
	operator=(Persistent const & rhs) noexcept
	{
		if(&rhs != this)
		{
			this->destroy();
			if(rhs._ptr)
			{
				_ptr = rhs._ptr;
				++_ptr->references;
			}
		}
		return *this;
	}
	
	inline bool operator!()       noexcept { return _ptr == nullptr || _ptr->object_ptr == nullptr; }
	inline bool operator!() const noexcept { return _ptr == nullptr || _ptr->object_ptr == nullptr; }

	explicit inline operator bool()        noexcept { return _ptr != nullptr && _ptr->object_ptr != nullptr; }
	explicit inline operator bool()  const noexcept { return _ptr != nullptr && _ptr->object_ptr != nullptr; }

	inline T       & operator*()        noexcept { return *_ptr->object_ptr; }
	inline T const & operator*()  const noexcept { return *_ptr->object_ptr; }

	inline T       * operator->()       noexcept { return _ptr->object_ptr; }
	inline T const * operator->() const noexcept { return _ptr->object_ptr; }

	inline T       * ptr()       noexcept { return _ptr == nullptr ? nullptr : _ptr->object_ptr; }
	inline T const * ptr() const noexcept { return _ptr == nullptr ? nullptr : _ptr->object_ptr; }

	inline count_t ref_count()        noexcept { return _ptr == nullptr ? 0 : _ptr->references; }
	inline count_t ref_count()  const noexcept { return _ptr == nullptr ? 0 : _ptr->references; }

	T & 
	ref() noexcept(false)
	{
		ds_throw_if(_ptr == nullptr || _ptr->object_ptr == nullptr, null_pointer());
		return *_ptr->object_ptr;
	}

	T const & 
	ref() const noexcept(false)
	{
		ds_throw_if(_ptr == nullptr || _ptr->object_ptr == nullptr, null_pointer());
		return *_ptr->object_ptr;
	}

	void 
	destroy() noexcept
	{
		if(_ptr && --_ptr->references == 0)
		{
			destruct(*_ptr);
			_deallocate(_ptr);
			_ptr = nullptr;
		}
	}

	inline void 
	swap(Persistent & rhs) noexcept
	{
		ds::swap(_ptr, rhs._ptr);
	}

	inline bool 
	operator==(conditional_t<is_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, equal<T>()); 
	}

	inline bool 
	operator!=(conditional_t<is_not_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, not_equal<T>()); 
	}

	inline bool 
	operator<=(conditional_t<is_less_or_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less_or_equal<T>()); 
	}

	inline bool 
	operator>=(conditional_t<is_greater_or_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater_or_equal<T>()); 
	}

	inline bool 
	operator<(conditional_t<is_less_than_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less<T>()); 
	}

	inline bool 
	operator>(conditional_t<is_greater_than_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater<T>()); 
	}

};


template <typename T, class A>
class Persistent<T *,A>
{
 public:
	using count_t = size_t;
	
	struct Storage
	{
		T     * object_ptr = nullptr;
		count_t references = 1;

		Storage(Storage &&) = delete;
		Storage(Storage const &) = delete;

		~Storage() = default;

		Storage(T * ptr_)
			: object_ptr { ptr_ }
		{}

	};

 private:
	Storage * _ptr = nullptr;

	static inline void
	_deallocate(void * block_) noexcept
	{
		A::deallocate(block_);
	}

	DS_nodiscard static inline void * 
	_allocate(size_t size_, align_t align_)
	{
		return A::allocate(size_, align_);
	}

	struct impossible_t
	{};

	template <class C>
	inline bool 
	_compare(impossible_t const &, C &&) const noexcept
	{
		return false;
	} 

	template <class C>
	inline bool 
	_compare(Persistent const & rhs, C && compare_) const noexcept
	{
		auto const & lhs = *this;
		return (lhs && rhs) ? compare_(*lhs, *rhs) : false;
	} 

 public:
	struct null_pointer : public exception
	{
		char const * what() const noexcept { return "null pointer"; }
	};

	~Persistent() noexcept
	{
		if(_ptr && --_ptr->references == 0)
		{
			destruct(*_ptr);
			_deallocate(_ptr);
		}
	}

	Persistent(noinit_t)
	{}

	Persistent()
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage))) }
	{}

	Persistent(T * ptr_)
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage)), ptr_) }
	{}

	Persistent(Unique<T *,A> && unique_)
		: _ptr { construct_at_safe<Storage>(_allocate(sizeof(Storage), alignof(Storage)), unique_._ptr) }
	{
		unique_._ptr = nullptr;
	}

	Persistent(Persistent && rhs) noexcept
		: _ptr { rhs._ptr }
	{
		rhs._ptr = nullptr;
	}

	Persistent(Persistent const & rhs) noexcept
		: _ptr { rhs._ptr }
	{
		if(_ptr)
			++_ptr->references;
	}

	Persistent & 
	operator=(Persistent && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}

	Persistent & 
	operator=(Persistent const & rhs) noexcept
	{
		if(&rhs != this)
		{
			this->destroy();
			if(rhs._ptr)
			{
				_ptr = rhs._ptr;
				++_ptr->references;
			}
		}
		return *this;
	}
	
	inline bool operator!()       noexcept { return _ptr == nullptr || _ptr->object_ptr == nullptr; }
	inline bool operator!() const noexcept { return _ptr == nullptr || _ptr->object_ptr == nullptr; }

	explicit inline operator bool()        noexcept { return _ptr != nullptr && _ptr->object_ptr != nullptr; }
	explicit inline operator bool()  const noexcept { return _ptr != nullptr && _ptr->object_ptr != nullptr; }

	inline T       & operator*()        noexcept { return *_ptr->object_ptr; }
	inline T const & operator*()  const noexcept { return *_ptr->object_ptr; }

	inline T       * operator->()       noexcept { return _ptr->object_ptr; }
	inline T const * operator->() const noexcept { return _ptr->object_ptr; }

	inline T       * ptr()       noexcept { return _ptr == nullptr ? nullptr : _ptr->object_ptr; }
	inline T const * ptr() const noexcept { return _ptr == nullptr ? nullptr : _ptr->object_ptr; }

	inline count_t ref_count()        noexcept { return _ptr == nullptr ? 0 : _ptr->references; }
	inline count_t ref_count()  const noexcept { return _ptr == nullptr ? 0 : _ptr->references; }

	T & 
	ref() noexcept(false)
	{
		ds_throw_if(_ptr == nullptr || _ptr->object_ptr == nullptr, null_pointer());
		return *_ptr->object_ptr;
	}

	T const & 
	ref() const noexcept(false)
	{
		ds_throw_if(_ptr == nullptr || _ptr->object_ptr == nullptr, null_pointer());
		return *_ptr->object_ptr;
	}

	void 
	destroy() noexcept
	{
		if(_ptr && --_ptr->references == 0)
		{
			destruct(*_ptr);
			_deallocate(_ptr);
			_ptr = nullptr;
		}
	}

	inline void 
	swap(Persistent & rhs) noexcept
	{
		ds::swap(_ptr, rhs._ptr);
	}

	inline bool 
	operator==(conditional_t<is_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, equal<T>()); 
	}

	inline bool 
	operator!=(conditional_t<is_not_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, not_equal<T>()); 
	}

	inline bool 
	operator<=(conditional_t<is_less_or_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less_or_equal<T>()); 
	}

	inline bool 
	operator>=(conditional_t<is_greater_or_equal_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater_or_equal<T>()); 
	}

	inline bool 
	operator<(conditional_t<is_less_than_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, less<T>()); 
	}

	inline bool 
	operator>(conditional_t<is_greater_than_comparable<T>::value,Persistent,impossible_t> const & rhs) const noexcept 
	{
		return this->_compare(rhs, greater<T>()); 
	}

};


// no const
template <typename T, class A> 
class Persistent<T const,A>
{
	Persistent() = delete;
};

// no references
template <typename T, class A> 
class Persistent<T &,A>
{
	Persistent() = delete;
};

// no unsized array types
template <typename T, class A> 
class Persistent<T[],A>
{
	Persistent() = delete;
};


template <typename T, class A = default_allocator> 
using persistent = Persistent<T,A>;

template <typename T, class A = default_nt_allocator> 
using nt_persistent = Persistent<T,A>;


template <typename T, class A>
struct usage<Persistent<T,A>> 
{
	using storage_t = typename Persistent<T,A>::Storage;
	static constexpr size_t _offset = aligned_offset(alignof(storage_t) + sizeof(storage_t), alignof(T));
	static constexpr size_t value   = sizeof(storage_t) + _offset + sizeof(T) + usage<T>::value;
};

template <typename T, class A, size_t count_>
struct usage_n<Persistent<T,A>,count_> 
{
	using storage_t = typename Persistent<T,A>::Storage;
	static constexpr size_t _single = usage<Persistent<T,A>>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(storage_t));
	static constexpr size_t value   = (_single + _offset) * count_; 
};


template <typename E, class A>
struct Hasher<Persistent<E,A>> : Hasher<E>
{
	static inline size_t hash(Persistent<E,A> const & rhs) noexcept { return rhs ? Hasher<E>::hash(*rhs) : 0; }
};

template <typename E, class A>
struct OrderedHasher<Persistent<E,A>> : OrderedHasher<E>
{
	static inline size_t hash(Persistent<E,A> const & rhs) noexcept { return rhs ? OrderedHasher<E>::hash(*rhs) : 0; }
};


template <class OST, typename T, class A
		, enable_if_t<is_out_streamable<OST,decltype(decl<Persistent<T,A> const &>().ref())>::value,int> = 0
	>
static OST &
operator<<(OST && ostream, Persistent<T,A> const & rhs)
{
	return ostream << rhs.ref();
}


} // namespace ds

#endif // DS_PERSISTENT
