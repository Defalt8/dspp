#pragma once
#ifndef DS_ALLOCATORS_NEW_DELETE
#define DS_ALLOCATORS_NEW_DELETE

#include "../common"

namespace ds {
namespace allocators {

// throwing allocator using ::operator new
class NewDelete
{
 public:
	struct allocation_failure : public bad_alloc
	{
		char const * what() const noexcept override { return "allocation failure"; }
	};

	DS_nodiscard static inline void * 
	allocate(size_t size_, DS_maybe_unused size_t align_ = alignof(max_align_t)) noexcept(false)
	{
		void * block_ = ::operator new(size_, std::nothrow);
		ds_throw_if(block_ == nullptr, allocation_failure());
		ds_throw_if_alt(block_ == nullptr, return nullptr);
		return block_;
	}

	static inline void 
	deallocate(void * block_) noexcept
	{
		::operator delete(block_);
	}

};


// no throw allocator using ::operator new
class NTNewDelete
{
 public:
	DS_nodiscard static inline void * 
	allocate(size_t size_, DS_maybe_unused size_t align_ = alignof(max_align_t)) noexcept
	{
		return ::operator new(size_, std::nothrow);
	}

	static inline void 
	deallocate(void * block_) noexcept
	{
		::operator delete(block_);
	}

};

using new_delete    = NewDelete;
using nt_new_delete = NTNewDelete;


} // namespace allocators
} // namespace ds


#endif // DS_ALLOCATORS_NEW_DELETE
