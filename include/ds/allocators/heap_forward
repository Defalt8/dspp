#pragma once
#ifndef DS_ALLOCATORS_HEAP_FORWARD
#define DS_ALLOCATORS_HEAP_FORWARD

#include "../common"
#include "new_delete"

namespace ds {
namespace allocators {

// throwing preallocated-heap forward allocator
class HeapForward : public Base
{
	byte_ptr_t   _mem  = nullptr;
	byte_cptr_t  _end  = nullptr;
	byte_ptr_t   _head = _mem;

	HeapForward(HeapForward &&) = delete;
	HeapForward(HeapForward const &) = delete;

 public:
	struct allocation_failure : public bad_alloc
	{
		char const * what() const noexcept override { return "allocation failure"; }
	};

	~HeapForward()
	{
		if(_mem != nullptr)
			NewDelete::deallocate(_mem);
	}

	HeapForward(size_t size_, align_t align_ = alignof(max_align_t))
		: _mem { static_cast<byte_ptr_t>(NewDelete::allocate(size_, align_)) }
		, _end { _mem == nullptr ? nullptr : _mem + size_ }
	{}

	DS_nodiscard void * 
	allocate(size_t size_, align_t align_ = alignof(max_align_t)) noexcept(false) override
	{
		size_t      const offset_  = (~size_t(_head)+1) & (--align_);
		byte_ptr_t  const block_   = _head + offset_;
		if(_mem == nullptr || block_ >= _end || size_t(_end - block_) < size_)
		{
			ds_throw(allocation_failure());
			ds_throw_alt(return nullptr);
		}
		_head = block_ + size_;
		return block_;
	}

	inline void 
	deallocate(void * block_) noexcept override
	{
		assert(block_ >= _mem && block_ < _end);
	}

};


// no-throw preallocated-heap forward allocator
class NTHeapForward : public NTBase
{
	byte_ptr_t   _mem  = nullptr;
	byte_cptr_t  _end  = nullptr;
	byte_ptr_t   _head = _mem;

	NTHeapForward(NTHeapForward &&) = delete;
	NTHeapForward(NTHeapForward const &) = delete;
	
 public:
	~NTHeapForward()
	{
		if(_mem != nullptr)
			NTNewDelete::deallocate(_mem);
	}

	NTHeapForward(size_t size_, align_t align_ = alignof(max_align_t))
		: _mem { static_cast<byte_ptr_t>(NTNewDelete::allocate(size_, align_)) }
		, _end { _mem == nullptr ? nullptr : _mem + size_ }
	{}

	DS_nodiscard void * 
	allocate(size_t size_, align_t align_ = alignof(max_align_t)) noexcept override
	{
		size_t      const offset_  = (~size_t(_head)+1) & (--align_);
		byte_ptr_t  const block_   = _head + offset_;
		if(_mem == nullptr || block_ >= _end || size_t(_end - block_) < size_)
			return nullptr;
		_head = block_ + size_;
		return block_;
	}

	inline void 
	deallocate(void * block_) noexcept override
	{
		assert(block_ >= _mem && block_ < _end);
	}

};


using heap_forward    = HeapForward;
using nt_heap_forward = NTHeapForward;


} // namespace allocators
} // namespace ds

#endif // DS_ALLOCATORS_HEAP_FORWARD
