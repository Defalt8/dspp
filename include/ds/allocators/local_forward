#pragma once
#ifndef DS_ALLOCATORS_LOCAL_FORWARD
#define DS_ALLOCATORS_LOCAL_FORWARD

#include "../common"
#include "base"

namespace ds {
namespace allocators {


// throwing local-aligned-bytes forward allocator
template <size_t sz_, size_t al_ = alignof(max_align_t)>
class LocalForward : public Base
{
	using bytes_t = AlignedBytes<sz_,al_>;
	bytes_t    _mem { noinit };
	byte_ptr_t _head = &_mem.bytes[0];

	LocalForward(LocalForward &&) = delete;
	LocalForward(LocalForward const &) = delete;

 public:
	struct allocation_failure : public bad_alloc
	{
		char const * what() const noexcept override { return "allocation failure"; }
	};

	LocalForward(noinit_t)
	{}
	
	LocalForward()
		: _mem {}
	{}

	DS_nodiscard void * 
	allocate(size_t size_, align_t align_ = alignof(max_align_t)) noexcept(false) override
	{
		size_t      const offset_  = (~size_t(_head)+1) & (--align_);
		byte_ptr_t  const block_   = _head + offset_;
		byte_cptr_t const mem_end = _mem.end();
		if(block_ >= mem_end || size_t(mem_end - block_) < size_)
		{
			ds_throw(allocation_failure());
			ds_throw_alt(return nullptr);
		}
		_head = block_ + size_;
		return block_;
	}

	inline void 
	deallocate(void * block_) noexcept override
	{
		assert(block_ >= _mem.begin() && block_ < _mem.end());
	}

};


// no-throw local-aligned-bytes forward allocator
template <size_t sz_, size_t al_ = alignof(max_align_t)>
class NTLocalForward : public NTBase
{
	using bytes_t = AlignedBytes<sz_,al_>;
	bytes_t    _mem { noinit };
	byte_ptr_t _head = &_mem.bytes[0];

	NTLocalForward(NTLocalForward &&) = delete;
	NTLocalForward(NTLocalForward const &) = delete;
	
 public:
	NTLocalForward(noinit_t)
	{}
	
	NTLocalForward()
		: _mem {}
	{}

	DS_nodiscard void * 
	allocate(size_t size_, align_t align_ = alignof(max_align_t)) noexcept override
	{
		size_t      const offset_  = (~size_t(_head)+1) & (--align_);
		byte_ptr_t  const block_   = _head + offset_;
		byte_cptr_t const mem_end = _mem.end();
		if(block_ >= mem_end || size_t(mem_end - block_) < size_)
			return nullptr;
		_head = block_ + size_;
		return block_;
	}

	inline void 
	deallocate(void * block_) noexcept override
	{
		assert(block_ >= _mem.begin() && block_ < _mem.end());
	}

};


template <size_t size_, align_t align_ = alignof(max_align_t)> using local_forward    = LocalForward<size_,align_>;
template <size_t size_, align_t align_ = alignof(max_align_t)> using nt_local_forward = NTLocalForward<size_,align_>;


} // namespace allocators
} // namespace ds

#endif // DS_ALLOCATORS_LOCAL_FORWARD
