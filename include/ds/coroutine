#pragma once
#ifndef DS_COROUTINE
#define DS_COROUTINE

#include "common"
#include "traits/allocator"
#include "allocator"
#include "unique"
#include "tuple"

namespace ds {

enum class co_
{
	halt,
	resume
};

enum class co
{
	_yield,
	_return
};

template <typename F, class A = default_allocator>
class Coroutine;

namespace traits {

template <typename F, class A>
struct allocator<Coroutine<F,A>> : allocator_traits<A> {};

} // namespace trait


template <class A, typename R, typename... Args>
class Coroutine<R(Args...),A>
{
	static_assert(are_all_false<is_reference<Args>...>::value, "no reference types");

	enum class state { suspended, done };

 public:
	using callable_t = Callable<co(co_,R &,Args &...),A>;
	using data_t     = Unique<Tuple<R, Args...>,A>;

 private:
	callable_t _callable;
	data_t     _data;
	state      _state = state::done;

	static constexpr auto _index_seq = make_index_sequence_t<0,sizeof...(Args)+1>();

	template <size_t... indices_>
	co
	_call(co_ _co_, index_sequence<indices_...>)
	{
		return _callable(_co_, _data->template at<indices_>()...);
	}
	
	Coroutine(Coroutine const &) = delete;

 public:
	~Coroutine()
	{
		if(_state != state::done && _callable && _data)
			_call(co_::halt, _index_seq);
	}

	Coroutine() = default;

	Coroutine(Coroutine && rhs) noexcept
		: _callable { ds::move(rhs._callable) }
		, _data     { ds::move(rhs._data) } 
		, _state    { rhs._state }
	{
		rhs._state = state::done;
	}

	template <typename... CArgs
			, enable_if_t<is_constructible<callable_t,CArgs...>::value,int> = 0
		>
	Coroutine(CArgs &&... callable_args)
		: _callable { ds::forward<CArgs>(callable_args)... }
		, _data     {}
		, _state    { state::suspended }
	{}

	template <typename... CArgs
			, enable_if_t<is_constructible<callable_t,CArgs...>::value,int> = 0
		>
	Coroutine(Args &&... data_init_args, init_t, CArgs &&... callable_args)
		: _callable { ds::forward<CArgs>(callable_args)... }
		, _data     { R{}, ds::forward<Args>(data_init_args)... }
		, _state    { state::suspended }
	{}

	Coroutine &
	operator=(Coroutine && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}

	void 
	destroy() noexcept
	{
		_callable.destroy();
		_data.destroy();
		_state = state::done;
	}

	void 
	swap(Coroutine & rhs) noexcept
	{
		ds::swap(_callable, rhs._callable);
		ds::swap(_data, rhs._data);
		ds::swap(_state, rhs._state);
	}

	R *
	resume()
	{
		if(_state != state::done && _callable && _data)
		{
			auto ret_ = _call(co_::resume, _index_seq);
			if(ret_ == co::_return)
				_state = state::done;
			return &_data->template at<0>();
		}
		return nullptr;
	}

	R * 
	get_yield() noexcept 
	{
		if(_data)
			return &_data->template at<0>();
		return nullptr;
	}

	R const * 
	get_yield() const noexcept 
	{
		if(_data)
			return &_data->template at<0>();
		return nullptr;
	}

	bool 
	is_done() const noexcept
	{
		return _state == state::done;
	}

	bool 
	is_not_done() const noexcept
	{
		return _state != state::done;
	}

	bool operator!() const noexcept { return !_callable || !_data; } 

	explicit inline operator bool()       noexcept { return bool(_callable) && bool(_data); } 
	explicit inline operator bool() const noexcept { return bool(_callable) && bool(_data); } 

};


template <class A, typename... Args>
class Coroutine<void(Args...),A>
{
	static_assert(are_all_false<is_reference<Args>...>::value, "no reference types");

	enum class state { suspended, done };

 public:
	using callable_t = Callable<co(co_,Args &...),A>;
	using data_t     = Unique<Tuple<Args...>,A>;

 private:
	callable_t _callable;
	data_t     _data;
	state      _state = state::done;

	static constexpr auto _index_seq = make_index_sequence_t<0,sizeof...(Args)>();

	template <size_t... indices_>
	co
	_call(co_ _co_, index_sequence<indices_...>)
	{
		return _callable(_co_, _data->template at<indices_>()...);
	}

	Coroutine(Coroutine const &) = delete;

 public:
	~Coroutine()
	{
		if(_state != state::done && _callable && _data)
			_call(co_::halt, _index_seq);
	}

	Coroutine() = default;

	Coroutine(Coroutine && rhs) noexcept
		: _callable { ds::move(rhs._callable) }
		, _data     { ds::move(rhs._data) } 
		, _state    { rhs._state }
	{
		rhs._state = state::done;
	}

	template <typename... CArgs
			, enable_if_t<is_constructible<callable_t,CArgs...>::value,int> = 0
		>
	Coroutine(CArgs &&... callable_args)
		: _callable { ds::forward<CArgs>(callable_args)... }
		, _data     {}
		, _state    { state::suspended }
	{}

	template <typename... CArgs
			, enable_if_t<is_constructible<callable_t,CArgs...>::value,int> = 0
		>
	Coroutine(Args &&... data_init_args, init_t, CArgs &&... callable_args)
		: _callable { ds::forward<CArgs>(callable_args)... }
		, _data     { ds::forward<Args>(data_init_args)... }
		, _state    { state::suspended }
	{}

	Coroutine &
	operator=(Coroutine && rhs) noexcept
	{
		if(&rhs != this)
		{
			this->swap(rhs);
			rhs.destroy();
		}
		return *this;
	}

	void 
	destroy() noexcept
	{
		_callable.destroy();
		_data.destroy();
		_state = state::done;
	}

	void 
	swap(Coroutine & rhs) noexcept
	{
		ds::swap(_callable, rhs._callable);
		ds::swap(_data, rhs._data);
		ds::swap(_state, rhs._state);
	}

	bool 
	resume()
	{
		if(_state != state::done && _callable && _data)
		{
			auto ret_ = _call(co_::resume, _index_seq);
			if(ret_ == co::_return)
				_state = state::done;
			return true;
		}
		return false;
	}

	bool 
	is_done() const noexcept
	{
		return _state == state::done;
	}

	bool 
	is_not_done() const noexcept
	{
		return _state != state::done;
	}

	bool operator!() const noexcept { return !_callable || !_data; } 

	explicit inline operator bool()       noexcept { return bool(_callable) && bool(_data); } 
	explicit inline operator bool() const noexcept { return bool(_callable) && bool(_data); } 

};


template <typename F, class A = default_allocator>    using coroutine    = Coroutine<F,A>;
template <typename F, class A = default_nt_allocator> using nt_coroutine = Coroutine<F,A>;

template <typename... Args> struct coroutine_impl { using type = callable_impl<Args...>; };

template <typename F, class A>
struct usage<Coroutine<F,A>> 
{
	using callable_t = typename Coroutine<F,A>::callable_t;
	using data_t     = typename Coroutine<F,A>::data_t;
	static constexpr size_t value = usage<callable_t>::value + usage<data_t>::value;
};

template <typename F, class A, size_t count_>
struct usage_n<Coroutine<F,A>,count_> 
{
	static constexpr size_t _single = usage<Coroutine<F,A>>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(Coroutine<F,A>));
	static constexpr size_t value   = (_single + _offset) * count_; 
};


template <typename R, typename... Args, typename... Ts>
struct usage<coroutine_impl<R(Args...),Ts...>> 
{
	using data_t = typename Coroutine<R(Args...)>::data_t;
	static constexpr size_t _callable = usage<callable_impl<R(Args...),Ts...>>::value;
	static constexpr size_t _offset   = aligned_offset(_callable, alignof(data_t));
	static constexpr size_t value     = _callable + _offset + usage<data_t>::value;
};

template <typename R, class C, typename... Args, typename... Ts>
struct usage<coroutine_impl<R(C::*)(Args...),Ts...>> 
{
	using data_t = typename Coroutine<R(Args...)>::data_t;
	static constexpr size_t _callable = usage<callable_impl<R(C::*)(Args...),Ts...>>::value;
	static constexpr size_t _offset   = aligned_offset(_callable, alignof(data_t));
	static constexpr size_t value     = _callable + _offset + usage<data_t>::value;
};

template <typename R, class C, typename... Args, typename... Ts>
struct usage<coroutine_impl<R(C::*)(Args...) const,Ts...>> 
{
	using data_t = typename Coroutine<R(Args...)>::data_t;
	static constexpr size_t _callable = usage<callable_impl<R(C::*)(Args...) const,Ts...>>::value;
	static constexpr size_t _offset   = aligned_offset(_callable, alignof(data_t));
	static constexpr size_t value     = _callable + _offset + usage<data_t>::value;
};

template <typename R, class C, typename... Args, typename... Ts>
struct usage<coroutine_impl<R(C::* const)(Args...) const,Ts...>> 
{
	using data_t = typename Coroutine<R(Args...)>::data_t;
	static constexpr size_t _callable = usage<callable_impl<R(C::* const)(Args...) const,Ts...>>::value;
	static constexpr size_t _offset   = aligned_offset(_callable, alignof(data_t));
	static constexpr size_t value     = _callable + _offset + usage<data_t>::value;
};


template <typename F, typename... Ts, size_t count_>
struct usage_n<coroutine_impl<F,Ts...>,count_> 
{
	static constexpr size_t _single = usage<coroutine_impl<F,Ts...>>::value;
	static constexpr size_t _offset = aligned_offset(_single, alignof(coroutine_impl<F,Ts...>));
	static constexpr size_t value   = (_single + _offset) * count_; 
};


} // namespace ds

#endif // DS_COROUTINE
