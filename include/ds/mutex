#pragma once
#ifndef DS_MUTEX
#define DS_MUTEX

#ifdef _WIN32
#	define WIN32_LEAN_AND_MEAN
#	include <Windows.h>
#else
#	include <pthread.h>
#endif

#include "common"

namespace ds {

class Mutex;
class MutexLock;

class Mutex
{
 public:
  #ifdef _WIN32
	using handle_t = HANDLE;
  #else
	using handle_t = pthread_mutex_t;
  #endif

 private:
  #ifdef _WIN32
	handle_t          _handle = INVALID_HANDLE_VALUE;
  #else
	handle_t mutable  _handle {};
	bool              _is_init = false;
  #endif

	static inline bool
	_release_and_lock(Mutex & mutex) noexcept
	{
		mutex.release();
		return mutex.lock();
	}
	
	Mutex(Mutex const & mutex) = delete;

 public:
	struct creation_failure : exception 
	{
		char const * what() const noexcept { return "mutex creation failure"; }
	};

	struct lock_failure : exception 
	{
		char const * what() const noexcept { return "mutex lock failure"; }
	};

	~Mutex() noexcept
	{
		this->destroy();
	}
	
	Mutex() noexcept(false)
  #ifdef _WIN32
		: _handle  { ::CreateMutexA(nullptr, false, 0) }
	{
		ds_throw_if(_handle == INVALID_HANDLE_VALUE, creation_failure());
	}
  #else
		: _handle  {}
		, _is_init { ::pthread_mutex_init(&_handle, nullptr) == 0 }
	{
		ds_throw_if(!_is_init, creation_failure());
	}
  #endif

	Mutex(bool lock_) noexcept(false)
  #ifdef _WIN32
		: _handle  { ::CreateMutexA(nullptr, false, 0) }
	{
		ds_throw_if(_handle == INVALID_HANDLE_VALUE, creation_failure());
		ds_throw_if(!this->lock(), lock_failure());
		ds_throw_if_alt(this->lock());
	}
  #else
		: _handle  {}
		, _is_init { ::pthread_mutex_init(&_handle, nullptr) == 0 }
	{
		ds_throw_if(!_is_init, creation_failure());
		ds_throw_if(!this->lock(), lock_failure());
		ds_throw_if_alt(this->lock());
	}
  #endif

	Mutex(nothrow_t) noexcept
  #ifdef _WIN32
		: _handle  { ::CreateMutexA(nullptr, false, 0) }
	{}
  #else
		: _handle  {}
		, _is_init { ::pthread_mutex_init(&_handle, nullptr) == 0 }
	{}
  #endif

	Mutex(bool lock_, nothrow_t) noexcept
  #ifdef _WIN32
		: _handle  { ::CreateMutexA(nullptr, false, 0) }
	{
		this->lock();
	}
  #else
		: _handle  {}
		, _is_init { ::pthread_mutex_init(&_handle, nullptr) == 0 }
	{
		this->lock();
	}
  #endif

	Mutex(Mutex && mutex) noexcept
  #ifdef _WIN32
		: _handle  { _release_and_lock(mutex) ? ds::move(mutex._handle) : ds::move(mutex._handle) }
	{
		mutex._handle = INVALID_HANDLE_VALUE;
	  	this->release();
	}
  #else
		: _handle  { _release_and_lock(mutex) ? ds::move(mutex._handle) : ds::move(mutex._handle) }
		, _is_init { mutex._is_init }
	{
		mutex._handle   = {};
		mutex._is_init  = false;
	  	this->release();
	}
  #endif

	bool
	create() noexcept
	{
	  #ifdef _WIN32
		if(_handle != INVALID_HANDLE_VALUE) 
			return true;
		_handle = ::CreateMutexA(nullptr, false, 0);
		return _handle != INVALID_HANDLE_VALUE;
	  #else
		if(_is_init) 
			return true;
		_is_init = ::pthread_mutex_init(&_handle, nullptr) == 0;
		return _is_init;
	  #endif
	}

	void
	destroy() noexcept
	{
	  #ifdef _WIN32
		if(_handle != INVALID_HANDLE_VALUE) 
		{
			if(::ReleaseMutex(_handle) == FALSE)
				::WaitForSingleObject(_handle, INFINITE);
			::CloseHandle(_handle);
			_handle = INVALID_HANDLE_VALUE;
		}
	  #else
		if(_is_init)
		{
			if(::pthread_mutex_unlock(&_handle) != 0)
				::pthread_mutex_lock(&_handle);
			::pthread_mutex_destroy(&_handle);
			_is_init = false;
		}
	  #endif
	}

	void
	swap(Mutex & rhs) noexcept
	{
		_release_and_lock(*this);
		_release_and_lock(rhs);
	  #ifdef _WIN32
		ds::swap(_handle, rhs._handle);
	  #else
		ds::swap(_handle, rhs._handle);
		ds::swap(_is_init, rhs._is_init);
	  #endif
		this->release();
		rhs.release();
	}

	inline bool 
	lock() noexcept
	{
	  #ifdef _WIN32
		if(_handle != INVALID_HANDLE_VALUE)
			return ::WaitForSingleObject(_handle, INFINITE) == WAIT_OBJECT_0;
	  #else
		if(_is_init)
			return ::pthread_mutex_lock(&_handle) == 0;
	  #endif
		return false;
	}

	inline bool 
	try_lock() noexcept
	{
	  #ifdef _WIN32
		if(_handle != INVALID_HANDLE_VALUE)
			return ::WaitForSingleObject(_handle, 0) == WAIT_OBJECT_0;
	  #else
		if(_is_init)
			return ::pthread_mutex_trylock(&_handle) == 0;
	  #endif
		return false;
	}

	inline bool 
	release() noexcept
	{
	  #ifdef _WIN32
		return _handle != INVALID_HANDLE_VALUE && ::ReleaseMutex(_handle) != FALSE;
	  #else
		return _is_init && ::pthread_mutex_unlock(&_handle) == 0;
	  #endif
	}

	inline bool
	release_then_lock() noexcept
	{
		this->release();
		return this->lock();
	}

	inline bool
	lock_and_release() noexcept
	{
		return this->lock() && this->release();
	}

	bool 
	is_locked() noexcept
	{
	  #ifdef _WIN32
		if(!this->try_lock())
			return true;
		::ReleaseMutex(_handle);
		return false;
	  #else
		if(!this->try_lock())
			return true;
		::pthread_mutex_unlock(&_handle);
		return false;
	  #endif
	}

	handle_t const & handle() const noexcept { return _handle; }

  #ifdef _WIN32
	inline bool operator!()         const noexcept { return _handle == INVALID_HANDLE_VALUE; }
	explicit inline operator bool()       noexcept { return _handle != INVALID_HANDLE_VALUE; }
	explicit inline operator bool() const noexcept { return _handle != INVALID_HANDLE_VALUE; }
  #else
	inline bool operator!()         const noexcept { return !_is_init; }
	explicit inline operator bool()       noexcept { return _is_init; }
	explicit inline operator bool() const noexcept { return _is_init; }
  #endif

};

class MutexLock
{
	Mutex * _mutex = nullptr;

	MutexLock(MutexLock const &) noexcept = delete;

 public:
	~MutexLock() noexcept 
	{
		_mutex->release();
	}

	MutexLock(MutexLock && rhs) noexcept
		: _mutex { ds::move(rhs._mutex) }
	{
		rhs._mutex = nullptr;
	}
	
	MutexLock(Mutex & mutex_) noexcept(false)
		: _mutex { &mutex_ }
	{
		if(!_mutex->lock())
		{
			ds_throw(Mutex::lock_failure());
		}
	}
	
	inline Mutex       & mutex()       noexcept { return *_mutex; }
	inline Mutex const & mutex() const noexcept { return *_mutex; }

	inline Mutex       * operator->()       noexcept { return _mutex; }
	inline Mutex const * operator->() const noexcept { return _mutex; }

};

using mutex      = Mutex;
using mutex_lock = MutexLock;


} // namespace ds

#endif // DS_MUTEX
